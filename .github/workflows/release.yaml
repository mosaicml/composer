name: Release

on:
  push:
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:

jobs:
  code-quality:
    uses: ./.github/workflows/code-quality.yaml

  pypi-packaging:
    needs:
      - code-quality

    name: Build/Publish/Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.x"

      - name: Build source and wheel distributions
        run: |
          if [[ "${{ github.ref }}" =~ refs\/tags\/v ]]; then
            PYPI_PACKAGE_NAME="mosaicml"
          else
            PYPI_PACKAGE_NAME="mosaicml-test-$(date +%Y%m%d%H%M%S)"
          fi

          python -m pip install --upgrade build twine
          COMPOSER_PACKAGE_NAME=$PYPI_PACKAGE_NAME python -m build
          twine check --strict dist/*

      - name: Publish ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: contains(github.ref, 'refs/tags/v')
        with:
          user: __token__
          password: ${{ secrets.PROD_PYPI_API_TOKEN }}

      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ! contains(github.ref, 'refs/tags/v')
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      # - name: Create GitHub Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: ${{ github.ref }}
      #     draft: false
      #     prerelease: false

      # - name: Get Asset name
      #   run: |
      #     export PKG=$(ls dist/ | grep tar)
      #     set -- $PKG
      #     echo "name=$1" >> $GITHUB_ENV
      # - name: Upload Release Asset (sdist) to GitHub
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: dist/${{ env.name }}
      #     asset_name: ${{ env.name }}
      #     asset_content_type: application/zip

  build-image-matrix:
    needs:
      - packaging
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          # Install yaml dependency
          pip install pyyaml

          # Generate build matrix
          BUILD_MATRIX=$(python .github/bin/gen_docker_matrix.py docker/build_matrix.yaml
          echo $BUILD_MATRIX >> $GITHUB_OUTPUT

  publish-docker-images:
    needs: build-image-matrix
    uses: ./.github/workflows/docker-configure-build-push.yaml
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.build-image-matrix.outputs.matrix) }}
    name: ${{ matrix.IMAGE_NAME }}
    with:
      build-args: |
        AWS_OFI_NCCL_VERSION=${{ matrix.AWS_OFI_NCCL_VERSION }}
        BASE_IMAGE=${{ matrix.BASE_IMAGE }}
        CUDA_VERSION=${{ matrix.CUDA_VERSION }}
        MOFED_VERSION=${{ matrix.MOFED_VERSION }}
        PYTHON_VERSION=${{ matrix.PYTHON_VERSION }}
        PYTORCH_VERSION=${{ matrix.PYTORCH_VERSION }}
        TORCHTEXT_VERSION=${{ matrix.TORCHTEXT_VERSION }}
        TORCHVISION_VERSION=${{ matrix.TORCHVISION_VERSION }}
      context: ./docker
      image-name: ${{ matrix.IMAGE_NAME }}
      image-uuid: ${{ matrix.UUID }}
      push: false
      staging: false
      tags: ${{ matrix.TAGS }}
      target: ${{ matrix.TARGET }}
    secrets:
      username: ${{ secrets.DOCKER_HUB_USERNAME }}
      password: ${{ secrets.DOCKER_HUB_PASSWORD }}

name: Pytest
on:
  push:
    branches:
      - dev
      - main
      - release/**
  pull_request:
    branches:
      - dev
      - main
      - release/**
  workflow_call:
  workflow_dispatch:
# Cancel old runs when a new commit is pushed to the same branch if not on main or dev
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/dev' }}
jobs:
  pytest:
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - name: 'cpu-3.8-1.11'
            container: mosaicml/pytorch:1.11.0_cpu-python3.8-ubuntu20.04
            markers: 'not daily and not remote and not gpu and not vision and not doctest'
            pytest_command: 'coverage run -m pytest'
          - name: 'cpu-3.9-1.12'
            container: mosaicml/pytorch:1.12.1_cpu-python3.9-ubuntu20.04
            markers: 'not daily and not remote and not gpu and not vision and not doctest'
            pytest_command: 'coverage run -m pytest'
          - name: 'cpu-3.10-1.13'
            container: mosaicml/pytorch:1.13.0_cpu-python3.10-ubuntu20.04
            markers: 'not daily and not remote and not gpu and not vision and not doctest'
            pytest_command: 'coverage run -m pytest'
          - name: 'cpu-vision'
            container: mosaicml/pytorch_vision:1.12.1_cpu-python3.9-ubuntu20.04
            markers: 'not daily and not remote and not gpu and vision and not doctest'
            pytest_command: 'coverage run -m pytest'
          - name: 'cpu-doctest'
            container: mosaicml/pytorch_vision:1.12.1_cpu-python3.9-ubuntu20.04
            markers: 'not daily and not remote and not gpu and not vision and doctest'
            pytest_command: 'coverage run -m pytest tests/test_docs.py'
    name: ${{ matrix.name }}
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        run: |
          set -ex
          export PATH=/composer-python:$PATH
          python -m pip install --upgrade pip wheel
          python -m pip install -e .[all]
      - name: Run Tests
        id: tests
        run: |
          set -ex
          export PATH=/composer-python:$PATH
          export COMMON_ARGS="-v --durations=20 -m '${{ matrix.markers }}'"

          # Necessary to run git diff for doctests
          git config --global --add safe.directory /__w/composer/composer

          make test PYTEST='${{ matrix.pytest_command }}' EXTRA_ARGS="$COMMON_ARGS --codeblocks"
          make test-dist PYTEST='${{ matrix.pytest_command }}' EXTRA_ARGS="$COMMON_ARGS" WORLD_SIZE=2

          python -m coverage combine
      - uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.sha }}-${{ matrix.name }}
          path: .coverage
  coverage:
    needs: [ pytest ]
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: |
          set -ex
          python -m pip install --upgrade pip wheel
          pip install coverage[toml]==6.5.0
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Generate coverage report
        run: |
          set -ex

          # Flatten the coverage files
          ls artifacts | while read x; do mv artifacts/$x/.coverage .coverage.$x; done

          python -m coverage combine
          python -m coverage report

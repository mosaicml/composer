name: Docker Image Configure-Build-Push
on:
  workflow_call:
    inputs:
      build-args:
        required: false
        type: string
      context:
        required: true
        type: string
      image-name:
        required: true
        type: string
      image-uuid:
        required: false
        type: string
      push:
        required: true
        type: boolean
      staging:
        required: true
        type: boolean
      staging-repo:
        required: false
        type: string
      tags:
        required: true
        type: string
      target:
        required: false
        type: string
    secrets:
      username:
        required: true
      password:
        required: true
jobs:
  configure-build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}

      - name: Calculate Docker Image Variables
        run: |
          set -euo pipefail

          ###################
          # Calculate the tag
          ###################
          if [ "${{ inputs.staging }}" = "true" ]; then
            STAGING_REPO=${{ inputs.staging-repo }}
            IMAGE_TAG=${STAGING_REPO}:${{ inputs.image-uuid }}
            IMAGE_CACHE="${STAGING_REPO}:${{ inputs.image-name }}-buildcache"
          else
            IMAGE_TAG=${{ inputs.tags }}
            IMAGE_CACHE="${IMAGE_TAG/,*/}-buildcache"
          fi

          echo "IMAGE_TAG=${IMAGE_TAG}" >> ${GITHUB_ENV}
          echo "IMAGE_CACHE=${IMAGE_CACHE}" >> ${GITHUB_ENV}

      - name: IMAGE_TAG = ${{ env.IMAGE_TAG }}
        run: echo ${{ env.IMAGE_TAG }}

      - name: Build and Push the Docker Image
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.context }}
          tags: ${{ env.IMAGE_TAG }}
          target: ${{ inputs.target }}
          push: ${{ inputs.push }}
          cache-from: type=registry,ref=${{ env.IMAGE_CACHE }}
          cache-to: type=registry,ref=${{ env.IMAGE_CACHE }},mode=max
          build-args: ${{ inputs.build-args }}

name: Pytest CPU
on:
  workflow_call:
    inputs:
      composer_package_name:
        required: true
        type: string
      container:
        required: true
        type: string
      name:
        required: true
        type: string
      pytest-command:
        required: true
        type: string
      pytest-markers:
        required: true
        type: string
      pytest-s3-bucket:
        required: false
        type: string
      pytest-wandb-entity:
        required: false
        type: string
      pytest-wandb-project:
        required: false
        type: string
    secrets:
      wandb-api-key:
        required: false
      aws-access-key-id:
        required: false
      aws-secret-access-key:
        required: false
      slack-notifications-bot-token:
        required: false
jobs:
  pytest-cpu:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    container: ${{ inputs.container }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup
        run: |
          set -ex
          export PATH=/composer-python:$PATH
          export COMPOSER_PACKAGE_NAME='${{ inputs.composer_package_name }}'
          python -m pip install --upgrade 'pip<23' wheel
          python -m pip install --upgrade .[all]
      - name: Run Tests
        id: tests
        run: |
          set -ex
          export PATH=/composer-python:$PATH
          export WANDB_API_KEY='${{ secrets.wandb-api-key }}'
          export WANDB_ENTITY='${{ inputs.pytest-wandb-entity }}'
          export WANDB_PROJECT='${{ inputs.pytest-wandb-project }}'
          export AWS_ACCESS_KEY_ID='${{ secrets.aws-access-key-id }}'
          export AWS_SECRET_ACCESS_KEY='${{ secrets.aws-secret-access-key }}'
          export S3_BUCKET='${{ inputs.pytest-s3-bucket }}'
          export COMMON_ARGS="-v --durations=20 -m '${{ inputs.pytest-markers }}' --s3_bucket '$S3_BUCKET'"

          # Necessary to run git diff for doctests
          git config --global --add safe.directory /__w/composer/composer

          make test PYTEST='${{ inputs.pytest-command }}' EXTRA_ARGS="$COMMON_ARGS --codeblocks"
          make test-dist PYTEST='${{ inputs.pytest-command }}' EXTRA_ARGS="$COMMON_ARGS" WORLD_SIZE=2

          python -m coverage combine
      - uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.sha }}-${{ inputs.name }}
          path: .coverage
      - name: Notify slack fail
        if: failure() && !cancelled() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-notifications-bot-token }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: composer-helpdesk
          status: FAILED
          color: danger

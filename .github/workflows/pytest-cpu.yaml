name: Pytest-CPU
on:
  pull_request: {}
  workflow_dispatch: {}
jobs:
  pytest:
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          # - container: mosaicml/pytorch:1.11.0_cpu-python3.8-ubuntu20.04
          #   markers: 'not daily and not gpu and not vision and not remote and not doctest'
          #   pytest_command: 'coverage run -m pytest'
          # - container: mosaicml/pytorch:1.12.1_cpu-python3.9-ubuntu20.04
          #   markers: 'not daily and not gpu and not vision and not remote and not doctest'
          #   pytest_command: 'coverage run -m pytest'
          - name: vision
            container: mosaicml/pytorch_vision:1.12.1_cpu-python3.9-ubuntu20.04
            markers: 'not daily and not gpu and vision and not remote and not doctest'
            pytest_command: 'coverage run -m pytest'
          # - name: doctest
          #   container: mosaicml/pytorch_vision:1.12.1_cpu-python3.9-ubuntu20.04
          #   markers: 'not daily and not gpu and not vision and not remote and doctest'
          #   pytest_command: 'coverage run -m pytest tests/test_docs.py'
          # - container: mosaicml/pytorch:1.13.0_cpu-python3.10-ubuntu20.04
          #   markers: 'not daily and not gpu and not vision and not remote and not doctest'
          #   pytest_command: 'coverage run -m pytest'
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        run: |
          set -ex
          export PATH=/composer-python:$PATH
          python -m pip install --upgrade pip wheel
          python -m pip install -e .[all]
      - name: Run Tests
        id: tests
        run: |
          set -ex
          export PATH=/composer-python:$PATH
          export COMMON_ARGS="-v --durations=20 -m '${{ matrix.markers }}'"

          make test PYTEST='${{ matrix.pytest_command }}' EXTRA_ARGS="$COMMON_ARGS --codeblocks"
          make test-dist PYTEST='${{ matrix.pytest_command }}' EXTRA_ARGS="$COMMON_ARGS" WORLD_SIZE=2

          python -m coverage combine
      - uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ env.GITHUB_SHA }}
          path: .coverage
  coverage:
    needs: [ pytest ]
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: |
          set -ex
          python -m pip install --upgrade pip wheel
          python -m pip install coverage
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Generate coverage report
        run: |
          set -ex
          ls
          sleep 5
          python -m coverage combine
          python -m coverage report

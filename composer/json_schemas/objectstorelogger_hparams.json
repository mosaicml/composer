{
    "$defs": {
        "LibcloudObjectStoreHparams": {
            "additionalProperties": false,
            "properties": {
                "container": {
                    "description": "The name of the container (i.e. bucket) to use.",
                    "type": "string"
                },
                "extra_init_kwargs": {
                    "description": "Extra keyword arguments to pass into the constructor for the specified provider.",
                    "type": "object"
                },
                "host": {
                    "description": "Override hostname for connections",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "key_environ": {
                    "description": "The name of an environment variable containing an API key or username to use to connect to the provider.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "port": {
                    "description": "Override port for connections",
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "provider": {
                    "description": "Cloud provider to use. Valid options are:\n* :mod:`~libcloud.storage.drivers.atmos`\n* :mod:`~libcloud.storage.drivers.auroraobjects`\n* :mod:`~libcloud.storage.drivers.azure_blobs`\n* :mod:`~libcloud.storage.drivers.backblaze_b2`\n* :mod:`~libcloud.storage.drivers.cloudfiles`\n* :mod:`~libcloud.storage.drivers.digitalocean_spaces`\n* :mod:`~libcloud.storage.drivers.google_storage`\n* :mod:`~libcloud.storage.drivers.ktucloud`\n* :mod:`~libcloud.storage.drivers.local`\n* :mod:`~libcloud.storage.drivers.minio`\n* :mod:`~libcloud.storage.drivers.nimbus`\n* :mod:`~libcloud.storage.drivers.ninefold`\n* :mod:`~libcloud.storage.drivers.oss`\n* :mod:`~libcloud.storage.drivers.rgw`\n* :mod:`~libcloud.storage.drivers.s3`\n\n.. seealso:: :doc:`Full list of libcloud providers <libcloud:storage/supported_providers>`",
                    "type": "string"
                },
                "region": {
                    "description": "Cloud region to use",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "secret_environ": {
                    "description": "The name of an environment variable containing an API secret or password to use to connect to the provider.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "required": [
                "container",
                "provider"
            ],
            "type": "object"
        },
        "S3ObjectStoreHparams": {
            "additionalProperties": false,
            "properties": {
                "bucket": {
                    "description": "The bucket name.",
                    "type": "string"
                },
                "client_config": {
                    "description": "Kwargs dictionary for :class:`botocore.config.Config`. Defaults to None.",
                    "oneOf": [
                        {
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "endpoint_url": {
                    "description": "The URL to an S3-Compatible object store. Must be specified if using something\nother than Amazon S3, like Google Cloud Storage. Defaults to None.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "prefix": {
                    "description": "A path prefix such as `folder/subfolder/` to prepend to object names. Defaults to ''.",
                    "type": "string"
                },
                "region_name": {
                    "description": "The region name. Must be specified if not available in\na config file or environment variables. Defaults to None.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "transfer_config": {
                    "description": "Kwargs dictionary for :class:`boto3.s3.transfer.TransferConfig`. Defaults to None.",
                    "oneOf": [
                        {
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "required": [
                "bucket"
            ],
            "type": "object"
        },
        "SFTPObjectStoreHparams": {
            "additionalProperties": false,
            "properties": {
                "connect_kwargs": {
                    "description": "Any additional kwargs to pass through to :meth:`.SSHClient.connect`.",
                    "oneOf": [
                        {
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "cwd": {
                    "description": "The directory to navigate to upon creating the SSH connection. If not present\nit will be created.",
                    "type": "string"
                },
                "host": {
                    "description": "The server to connect to.\nAlso accepts a URI string in the form ``'sftp://username@host:port/./relative/path'``.\nFor an absolute path, use a double `//` -- e.g. ``'sftp://username@host:port//absolute/path'``.",
                    "type": "string"
                },
                "key_filename": {
                    "description": "The filepath to the a private key (if required) needed to\nauthenticate. Defaults to None. Any keys specified here will be tried *in addition* to any keys\nspecified in ``~/.ssh/`` or via a SSH agent.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "key_filename_environ": {
                    "description": "The name of an environment variable containing the path to a SSH keyfile. Note that `key_filename` takes precedence over this variable.",
                    "type": "string"
                },
                "known_hosts_filename": {
                    "description": "The filename of the known hosts file. If not specified,\nthe default SSH known hosts will be used.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "known_hosts_filename_environ": {
                    "description": "The name of an environment variable containing the path to a SSH known hosts file. Note that `known_hosts_filename` takes precedence over this variable.",
                    "type": "string"
                },
                "missing_host_key_policy": {
                    "description": "The class name or instance of\n:class:`paramiko.client.MissingHostKeyPolicy` to use for a missing host key. Defaults to ``'RejectPolicy'``.\n\nBuilt-in options:\n*   ``'RejectPolicy'`` (the default), which will reject any host key not authorized in the ``known_hosts_filename``.\n*   ``'AutoAddPolicy'``, which will add any unknown host key.\n*   ``'WarningPolicy'``, which will warn on an unknown host key.\n\nFor custom logic, subclass :class:`paramiko.client.MissingHostKeyPolicy`, and provide an instance of this class.",
                    "type": "string"
                },
                "port": {
                    "description": "The server port to connect to.",
                    "type": "integer"
                },
                "username": {
                    "description": "The username (if not specified in the SSH config) needed to authenticate.\nDefaults to None.",
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "required": [
                "host"
            ],
            "type": "object"
        }
    },
    "additionalProperties": false,
    "properties": {
        "num_attempts": {
            "description": "For operations that fail with a transient error, the number of attempts to make.\nDefaults to 3.",
            "type": "integer"
        },
        "num_concurrent_uploads": {
            "description": "Maximum number of concurrent uploads. Defaults to 4.",
            "type": "integer"
        },
        "object_name": {
            "description": "A format string used to determine the object name.\nThe following format variables are available:\n\n+------------------------+-------------------------------------------------------+\n| Variable               | Description                                           |\n+========================+=======================================================+\n| ``{artifact_name}``    | The name of the artifact being logged.                |\n+------------------------+-------------------------------------------------------+\n| ``{run_name}``         | The name of the training run. See                     |\n|                        | :attr:`.State.run_name`.                              |\n+------------------------+-------------------------------------------------------+\n| ``{rank}``             | The global rank, as returned by                       |\n|                        | :func:`~composer.utils.dist.get_global_rank`.         |\n+------------------------+-------------------------------------------------------+\n| ``{local_rank}``       | The local rank of the process, as returned by         |\n|                        | :func:`~composer.utils.dist.get_local_rank`.          |\n+------------------------+-------------------------------------------------------+\n| ``{world_size}``       | The world size, as returned by                        |\n|                        | :func:`~composer.utils.dist.get_world_size`.          |\n+------------------------+-------------------------------------------------------+\n| ``{local_world_size}`` | The local world size, as returned by                  |\n|                        | :func:`~composer.utils.dist.get_local_world_size`.    |\n+------------------------+-------------------------------------------------------+\n| ``{node_rank}``        | The node rank, as returned by                         |\n|                        | :func:`~composer.utils.dist.get_node_rank`.           |\n+------------------------+-------------------------------------------------------+\n\nLeading slashes (``'/'``) will be stripped.\n\nConsider the following example, which subfolders the artifacts by their rank:\n\n.. testsetup:: composer.loggers.object_store_logger.ObjectStoreLogger.__init__.object_name\n\n    import os\n\n    os.makedirs('path/to', exist_ok=True)\n\n    with open('path/to/file.txt', 'w+') as f:\n        f.write('hi')\n\n.. doctest:: composer.loggers.object_store_logger.ObjectStoreLogger.__init__.object_name\n\n    >>> object_store_logger = ObjectStoreLogger(..., object_name='rank_{rank}/{artifact_name}')\n    >>> trainer = Trainer(..., run_name='foo', loggers=[object_store_logger])\n    >>> trainer.logger.file_artifact(\n    ...     log_level=LogLevel.EPOCH,\n    ...     artifact_name='bar.txt',\n    ...     file_path='path/to/file.txt',\n    ... )\n\n.. testcleanup:: composer.loggers.object_store_logger.ObjectStoreLogger.__init__.object_name\n\n    # Shut down the uploader\n    object_store_logger._check_workers()\n    object_store_logger.post_close()\n\nAssuming that the process's rank is ``0``, the object store would store the contents of\n``'path/to/file.txt'`` in an object named ``'rank0/bar.txt'``.\n\nDefault: ``'{artifact_name}'``",
            "type": "string"
        },
        "object_store_hparams": {
            "anyOf": [
                {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^libcloud\\+": {
                            "$ref": "#/$defs/LibcloudObjectStoreHparams"
                        }
                    },
                    "properties": {
                        "libcloud": {
                            "$ref": "#/$defs/LibcloudObjectStoreHparams"
                        }
                    },
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^s3\\+": {
                            "$ref": "#/$defs/S3ObjectStoreHparams"
                        }
                    },
                    "properties": {
                        "s3": {
                            "$ref": "#/$defs/S3ObjectStoreHparams"
                        }
                    },
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^sftp\\+": {
                            "$ref": "#/$defs/SFTPObjectStoreHparams"
                        }
                    },
                    "properties": {
                        "sftp": {
                            "$ref": "#/$defs/SFTPObjectStoreHparams"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Object store provider hparams."
        },
        "should_log_artifact": {
            "description": "Path to a filter function which returns whether an artifact should be logged.",
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        },
        "upload_staging_folder": {
            "description": "A folder to use for staging uploads.\nIf not specified, defaults to using a :func:`~tempfile.TemporaryDirectory`.",
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "null"
                }
            ]
        },
        "use_procs": {
            "description": "Whether to perform file uploads in background processes (as opposed to threads).\nDefaults to True.",
            "type": "boolean"
        }
    },
    "required": [
        "object_store_hparams"
    ],
    "type": "object"
}

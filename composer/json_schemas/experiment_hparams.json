{
    "type": "object",
    "properties": {
        "trainer": {
            "type": "object",
            "properties": {
                "model": {
                    "anyOf": [
                        {
                            "type": "object",
                            "patternProperties": {
                                "^unet($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/0_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/0_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of classes.  Needed for classification tasks"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^ssd($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/1_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/1_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "type": "integer",
                                            "description": "num_classes"
                                        },
                                        "input_size": {
                                            "type": "integer",
                                            "description": "input size"
                                        },
                                        "overlap_threshold": {
                                            "type": "number",
                                            "description": "threshold"
                                        },
                                        "nms_max_detections": {
                                            "type": "integer",
                                            "description": "nms max dets"
                                        },
                                        "data": {
                                            "type": "string",
                                            "description": "data"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^deeplabv3($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/2_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/2_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of classes.  Needed for classification tasks"
                                        },
                                        "backbone_arch": {
                                            "type": "string",
                                            "description": "The backbone architecture to use. Must be either ['resnet50', resnet101']."
                                        },
                                        "is_backbone_pretrained": {
                                            "type": "boolean",
                                            "description": "If true, use pre-trained weights for backbone."
                                        },
                                        "backbone_url": {
                                            "type": "string",
                                            "description": "Url to download model weights from. If blank (default), will download from PyTorch's url."
                                        },
                                        "use_plus": {
                                            "type": "boolean",
                                            "description": "If true (default), use DeepLabv3+ head instead of DeepLabv3."
                                        },
                                        "sync_bn": {
                                            "type": "boolean",
                                            "description": "If true, use SyncBatchNorm to sync batch norm statistics across GPUs."
                                        },
                                        "ignore_index": {
                                            "type": "integer",
                                            "description": "Class label to ignore when calculating the loss and other metrics."
                                        },
                                        "cross_entropy_weight": {
                                            "type": "number",
                                            "description": "Weight to scale the cross entropy loss."
                                        },
                                        "dice_weight": {
                                            "type": "number",
                                            "description": "Weight to scale the dice loss."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^efficientnetb0($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/3_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/3_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of classes.  Needed for classification tasks"
                                        },
                                        "drop_connect_rate": {
                                            "type": "number",
                                            "description": "Probability of dropping a sample within a block before identity connection."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^resnet_cifar($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/4_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/4_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "type": "integer",
                                            "description": "The number of classes.  Needed for classification tasks"
                                        },
                                        "model_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "\"cifar_resnet_9\", \"cifar_resnet_20\" or \"cifar_resnet_56\""
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^resnet($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/5_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/5_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of classes.  Needed for classification tasks"
                                        },
                                        "model_name": {
                                            "type": "string",
                                            "description": "ResNet architecture to instantiate, must be one of ['resnet18', 'resnet34', 'resnet50', 'resnet101', 'resnet152']. (default: '')"
                                        },
                                        "weights": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "If provided, pretrained weights can be specified, such as with ``IMAGENET1K_V2``. (default: ``None``)"
                                        },
                                        "pretrained": {
                                            "type": "boolean",
                                            "description": "If True, use ImageNet pretrained weights. Default: ``False``. This parameter is deprecated and will soon be removed."
                                        },
                                        "groups": {
                                            "type": "integer",
                                            "description": "Number of filter groups for the 3x3 convolution layer in bottleneck block. (default: ``1``)"
                                        },
                                        "width_per_group": {
                                            "type": "integer",
                                            "description": "Initial width for each convolution group. Width doubles after each stage. (default: ``64``)"
                                        },
                                        "loss_name": {
                                            "type": "string",
                                            "description": "Name of loss function. E.g. 'soft_cross_entropy' or 'binary_cross_entropy_with_logits'. (default: ``soft_cross_entropy``)"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^mnist_classifier($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/6_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/6_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of classes.  Needed for classification tasks"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^gpt2($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/7_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/7_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of classes.  Needed for classification tasks"
                                        },
                                        "model_config": {
                                            "oneOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "A dictionary providing a HuggingFace model configuration."
                                        },
                                        "pretrained_model_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Pretrained model name to pull from Hugging Face Model Hub."
                                        },
                                        "use_pretrained": {
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to initialize the model with the pretrained weights."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The tokenizer used for this model, necessary to assert required model inputs."
                                        },
                                        "gradient_checkpointing": {
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to enable gradient checkpointing."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^bert($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/8_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/8_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of classes.  Needed for classification tasks"
                                        },
                                        "model_config": {
                                            "oneOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "A dictionary providing a HuggingFace model configuration."
                                        },
                                        "pretrained_model_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Pretrained model name to pull from Hugging Face Model Hub."
                                        },
                                        "use_pretrained": {
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to initialize the model with the pretrained weights."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The tokenizer used for this model, necessary to assert required model inputs."
                                        },
                                        "gradient_checkpointing": {
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to enable gradient checkpointing."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^bert_classification($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/9_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/9_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of classes.  Needed for classification tasks"
                                        },
                                        "num_labels": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of possible labels for the task."
                                        },
                                        "pretrained_model_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Pretrained model name to pull from Hugging Face Model Hub."
                                        },
                                        "model_config": {
                                            "oneOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "A dictionary providing a HuggingFace model configuration."
                                        },
                                        "use_pretrained": {
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to initialize the model with the pretrained weights."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The tokenizer used for this model, necessary to assert required model inputs."
                                        },
                                        "gradient_checkpointing": {
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to enable gradient checkpointing."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^timm($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/10_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/10_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "type": "integer",
                                            "description": "The number of classes.  Needed for classification tasks"
                                        },
                                        "model_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "timm model name e.g: 'resnet50', list of models can be found at\nhttps://github.com/rwightman/pytorch-image-models"
                                        },
                                        "pretrained": {
                                            "type": "boolean",
                                            "description": "imagenet pretrained"
                                        },
                                        "drop_rate": {
                                            "type": "number",
                                            "description": "dropout rate"
                                        },
                                        "drop_path_rate": {
                                            "oneOf": [
                                                {
                                                    "type": "number"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "drop path rate (model default if None)"
                                        },
                                        "drop_block_rate": {
                                            "oneOf": [
                                                {
                                                    "type": "number"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "drop block rate (model default if None)"
                                        },
                                        "global_pool": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Global pool type, one of (fast, avg, max, avgmax, avgmaxc). Model default if None."
                                        },
                                        "bn_momentum": {
                                            "oneOf": [
                                                {
                                                    "type": "number"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "BatchNorm momentum override (model default if not None)"
                                        },
                                        "bn_eps": {
                                            "oneOf": [
                                                {
                                                    "type": "number"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "BatchNorm epsilon override (model default if not None)"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^vit_small_patch16($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "initializers": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/11_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/11_list"
                                                    }
                                                }
                                            ],
                                            "description": "The initialization strategy for the model"
                                        },
                                        "num_classes": {
                                            "type": "integer",
                                            "description": "number of classes.  Needed for classification tasks"
                                        },
                                        "image_size": {
                                            "type": "integer",
                                            "description": "input image size. If you have rectangular images, make sure your image size is the maximum of the width and height"
                                        },
                                        "channels": {
                                            "type": "integer",
                                            "description": "number of  image channels"
                                        },
                                        "dropout": {
                                            "type": "number",
                                            "description": "dropout rate"
                                        },
                                        "embedding_dropout": {
                                            "type": "number",
                                            "description": "embedding dropout rate"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ],
                    "description": "The model to train. Can be user-defined or one of the models included\nwith Composer.\n\n.. seealso:: :mod:`composer.models` for models built into Composer."
                },
                "dataloader": {
                    "type": "object",
                    "properties": {
                        "num_workers": {
                            "type": "integer",
                            "description": "Number of CPU workers to use per device to fetch data.\nSet to ``0`` to use the main training thread for dataloading.\nWhile zero workers can be useful for debugging, it should not be used for performance reasons."
                        },
                        "prefetch_factor": {
                            "type": "integer",
                            "description": "Number of samples loaded in advance by each worker.\nFor example, 2 means there will be a total of 2 * num_workers samples prefetched across all workers.\nIf ``num_workers = 0``, then the ``prefetch_factor`` must be left at the default value."
                        },
                        "persistent_workers": {
                            "type": "boolean",
                            "description": "Whether to reuse dataloader workers across epochs. If ``num_workers`` is 0,\n   then this field must be ``False``"
                        },
                        "pin_memory": {
                            "type": "boolean",
                            "description": "Whether or not to copy Tensors into CUDA pinned memory before returning them.\nIf ``num_workers = 0``, then the ``pin_memory`` must be ``False``."
                        },
                        "timeout": {
                            "type": "number",
                            "description": "Timeout, in seconds, for collecting a batch from workers. Set to ``0`` for no timeout."
                        }
                    },
                    "additionalProperties": false,
                    "referenced": false,
                    "description": "dataloader hparams"
                },
                "train_dataset": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^ade20k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val', 'test']"
                                                },
                                                "base_size": {
                                                    "type": "integer",
                                                    "description": "Initial size of the image and target before other augmentations"
                                                },
                                                "min_resize_scale": {
                                                    "type": "number",
                                                    "description": "Minimum value that the image and target can be scaled"
                                                },
                                                "max_resize_scale": {
                                                    "type": "number",
                                                    "description": "Maximum value that the image and target can be scaled"
                                                },
                                                "final_size": {
                                                    "type": "integer",
                                                    "description": "Final size of the image and target"
                                                },
                                                "ignore_background": {
                                                    "type": "boolean",
                                                    "description": "If true, ignore the background class in training loss"
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_ade20k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                },
                                                "base_size": {
                                                    "type": "integer",
                                                    "description": "Initial size of the image and target before other augmentations"
                                                },
                                                "min_resize_scale": {
                                                    "type": "number",
                                                    "description": "Minimum value that the image and target can be scaled"
                                                },
                                                "max_resize_scale": {
                                                    "type": "number",
                                                    "description": "Maximum value that the image and target can be scaled"
                                                },
                                                "final_size": {
                                                    "type": "integer",
                                                    "description": "Final size of the image and target"
                                                },
                                                "ignore_background": {
                                                    "type": "boolean",
                                                    "description": "If true, ignore the background class in training loss"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^brats($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "oversampling": {
                                                    "type": "number",
                                                    "description": "oversampling"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^imagenet($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "resize_size": {
                                                    "type": "integer",
                                                    "description": "resize size. Set to -1 to not resize"
                                                },
                                                "crop_size": {
                                                    "type": "integer",
                                                    "description": "crop size"
                                                },
                                                "use_ffcv": {
                                                    "type": "boolean",
                                                    "description": "whether to use ffcv for faster dataloading"
                                                },
                                                "ffcv_cpu_only": {
                                                    "type": "boolean",
                                                    "description": "Use cpu for all transformations."
                                                },
                                                "ffcv_dir": {
                                                    "type": "string",
                                                    "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                                },
                                                "ffcv_dest": {
                                                    "type": "string",
                                                    "description": "<file>.ffcv file that has dataset samples"
                                                },
                                                "ffcv_write_dataset": {
                                                    "type": "boolean",
                                                    "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_imagenet1k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                },
                                                "resize_size": {
                                                    "type": "integer",
                                                    "description": "Resize size. Set to -1 to not resize"
                                                },
                                                "crop_size": {
                                                    "type": "integer",
                                                    "description": "Crop size"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^cifar10($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "download": {
                                                    "type": "boolean",
                                                    "description": "whether to download the dataset, if needed"
                                                },
                                                "use_ffcv": {
                                                    "type": "boolean",
                                                    "description": "whether to use ffcv for faster dataloading"
                                                },
                                                "ffcv_dir": {
                                                    "type": "string",
                                                    "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                                },
                                                "ffcv_dest": {
                                                    "type": "string",
                                                    "description": "<file>.ffcv file that has dataset samples"
                                                },
                                                "ffcv_write_dataset": {
                                                    "type": "boolean",
                                                    "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_cifar10($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^mnist($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "download": {
                                                    "type": "boolean",
                                                    "description": "whether to download the dataset, if needed"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^lm($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "$ref": "#/$defs/12_list"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/12_list"
                                                            }
                                                        }
                                                    ],
                                                    "description": "Path to the Huggingface Datasets directory."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Whether to use 'train', 'validation' or 'test' split."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the tokenizer to preprocess text with."
                                                },
                                                "use_masked_lm": {
                                                    "type": "boolean",
                                                    "description": "Whether the dataset should be encoded with masked language modeling or not."
                                                },
                                                "num_tokens": {
                                                    "type": "integer",
                                                    "description": "If desired, the number of tokens to truncate the dataset to."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If using masked language modeling, the probability to mask tokens with."
                                                },
                                                "seed": {
                                                    "type": "integer",
                                                    "description": "Which seed to use to generate train and validation splits."
                                                },
                                                "subsample_ratio": {
                                                    "type": "number",
                                                    "description": "If desired, the percentage of the dataset to use."
                                                },
                                                "max_seq_length": {
                                                    "type": "integer",
                                                    "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^glue($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "task": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The GLUE task to train on, choose one from: CoLA, MNLI, MRPC, QNLI, QQP, RTE, SST-2, and STS-B."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Whether to use 'train', 'validation' or 'test' split."
                                                },
                                                "max_seq_length": {
                                                    "type": "integer",
                                                    "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                                },
                                                "max_network_retries": {
                                                    "type": "integer",
                                                    "description": "Optionally, the number of times to retry HTTP requests if they fail."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^coco($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_coco($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^c4($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "Whether to drop the last samples for the last batch."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the samples in the dataset. Currently, shards are assigned and consumed with deterministic per-device shard order, but shuffling affects the order of samples via (per-device) shuffle buffers."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "What split of the dataset to use. Either `train` or `validation`."
                                                },
                                                "num_samples": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The number of post-processed token samples, used to set epoch size of the IterableDataset."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "max_seq_len": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The max sequence length of each token sample."
                                                },
                                                "group_method": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "How to group text samples into token samples. Either `truncate` or `concat`."
                                                },
                                                "mlm": {
                                                    "type": "boolean",
                                                    "description": "Whether or not to use masked language modeling."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If `mlm==True`, the probability that tokens are masked."
                                                },
                                                "shuffle_buffer_size": {
                                                    "type": "integer",
                                                    "description": "If `shuffle=True`, samples are read into a buffer of this size (per-device), and randomly sampled from there to produce shuffled samples."
                                                },
                                                "seed": {
                                                    "type": "integer",
                                                    "description": "If `shuffle=True`, what seed to use for shuffling operations."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_c4($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "What split of the dataset to use. Either `train` or `val`."
                                                },
                                                "tokenizer_name": {
                                                    "type": "string",
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "max_seq_len": {
                                                    "type": "integer",
                                                    "description": "The max sequence length of each token sample."
                                                },
                                                "group_method": {
                                                    "type": "string",
                                                    "description": "How to group text samples into token samples. Currently only `truncate` is supported."
                                                },
                                                "mlm": {
                                                    "type": "boolean",
                                                    "description": "Whether or not to use masked language modeling."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If `mlm==True`, the probability that tokens are masked."
                                                },
                                                "max_retries": {
                                                    "type": "integer",
                                                    "description": "Number of download re-attempts before giving up."
                                                },
                                                "timeout": {
                                                    "type": "number",
                                                    "description": "How long to wait for shard to download before raising an exception."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Training dataset hparams"
                },
                "train_dataloader_label": {
                    "type": "string",
                    "description": "The label for the train dataloader. (default: ``'train'``)\nThis label is used to index the training metrics (if ``compute_training_metrics`` is True) in\n:attr:`.State.current_metrics`.\n\nThis parameter has no effect if ``train_dataloader`` or ``compute_training_metrics`` are not specified."
                },
                "train_batch_size": {
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "batch size for each optimization step, across all devices and gradient accumulations."
                },
                "train_subset_num_batches": {
                    "type": "integer",
                    "description": "If specified, finish every epoch early after training\non this many batches. This parameter has no effect if it is greater than ``len(train_dataloader)``.\nIf ``-1``, then the entire dataloader will be iterated over. (default: ``-1``)\n\nWhen using the profiler, it can be helpful to set this parameter to the length of the profile schedule.\nThis setting will end each epoch early to avoid additional training that will not be profiled.\n\nThis parameter is ignored if ``train_dataloader`` is not specified."
                },
                "compute_training_metrics": {
                    "type": "boolean",
                    "description": "Whether to compute training metrics. (default: ``False``)\nTraining metrics will be indexed on :attr:`.State.current_metrics` under the ``train_dataloader_label``\nkey (which defaults to ``'train'``)."
                },
                "max_duration": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The maximum duration to train. Can be an integer, which will be\ninterpreted to be epochs, a str (e.g. ``1ep``, or ``10ba``), or a :class:`.Time` object.\n\nIf ``max_duration`` is not specified when constructing the trainer, ``duration`` must be specified when invoking\n:meth:`.Trainer.fit`."
                },
                "algorithms": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/13_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/13_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The algorithms to use during training. If ``None``, then\nno algorithms will be used. (default: ``None``)\n\n.. seealso:: :mod:`composer.algorithms` for the different algorithms built into Composer."
                },
                "optimizers": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^adam($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "lr": {
                                                    "type": "number",
                                                    "description": "learning rate (default: 1e-3)"
                                                },
                                                "betas": {
                                                    "oneOf": [
                                                        {
                                                            "$ref": "#/$defs/14_list"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/14_list"
                                                            }
                                                        }
                                                    ],
                                                    "description": "coefficients used for computing\nrunning averages of gradient and its square (default: (0.9, 0.999))"
                                                },
                                                "eps": {
                                                    "type": "number",
                                                    "description": "term added to the denominator to improve\nnumerical stability (default: 1e-8)"
                                                },
                                                "weight_decay": {
                                                    "type": "number",
                                                    "description": "weight decay (L2 penalty) (default: 0)"
                                                },
                                                "amsgrad": {
                                                    "type": "boolean",
                                                    "description": "whether to use the AMSGrad variant of this\nalgorithm from the paper `On the Convergence of Adam and Beyond`_\n(default: False)"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^adamw($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "lr": {
                                                    "type": "number",
                                                    "description": "learning rate (default: 1e-3)"
                                                },
                                                "betas": {
                                                    "oneOf": [
                                                        {
                                                            "$ref": "#/$defs/15_list"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/15_list"
                                                            }
                                                        }
                                                    ],
                                                    "description": "coefficients used for computing\nrunning averages of gradient and its square (default: (0.9, 0.999))"
                                                },
                                                "eps": {
                                                    "type": "number",
                                                    "description": "term added to the denominator to improve\nnumerical stability (default: 1e-8)"
                                                },
                                                "weight_decay": {
                                                    "type": "number",
                                                    "description": "weight decay coefficient (default: 1e-2)"
                                                },
                                                "amsgrad": {
                                                    "type": "boolean",
                                                    "description": "whether to use the AMSGrad variant of this\nalgorithm from the paper `On the Convergence of Adam and Beyond`_\n(default: False)"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^decoupled_adamw($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "lr": {
                                                    "type": "number",
                                                    "description": "Learning rate. Default: ``1e-3``."
                                                },
                                                "betas": {
                                                    "oneOf": [
                                                        {
                                                            "$ref": "#/$defs/16_list"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/16_list"
                                                            }
                                                        }
                                                    ],
                                                    "description": "Coefficients used for computing running averages of gradient and its square\nDefault: ``(0.9, 0.999)``."
                                                },
                                                "eps": {
                                                    "type": "number",
                                                    "description": "Term added to the denominator to improve numerical stability. Default: ``1e-8``."
                                                },
                                                "weight_decay": {
                                                    "type": "number",
                                                    "description": "Decoupled weight decay factor. Default: ``1e-2``."
                                                },
                                                "amsgrad": {
                                                    "type": "boolean",
                                                    "description": "Enables the amsgrad variant of Adam. Default: ``False``."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^radam($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "lr": {
                                                    "type": "number",
                                                    "description": "learning rate (default: 1e-3)"
                                                },
                                                "betas": {
                                                    "oneOf": [
                                                        {
                                                            "$ref": "#/$defs/17_list"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/17_list"
                                                            }
                                                        }
                                                    ],
                                                    "description": "coefficients used for computing\nrunning averages of gradient and its square (default: (0.9, 0.999))"
                                                },
                                                "eps": {
                                                    "type": "number",
                                                    "description": "term added to the denominator to improve\nnumerical stability (default: 1e-8)"
                                                },
                                                "weight_decay": {
                                                    "type": "number",
                                                    "description": "weight decay (L2 penalty) (default: 0)"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^sgd($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "lr": {
                                                    "type": "number",
                                                    "description": "learning rate"
                                                },
                                                "momentum": {
                                                    "type": "number",
                                                    "description": "momentum factor (default: 0)"
                                                },
                                                "weight_decay": {
                                                    "type": "number",
                                                    "description": "weight decay (L2 penalty) (default: 0)"
                                                },
                                                "dampening": {
                                                    "type": "number",
                                                    "description": "dampening for momentum (default: 0)"
                                                },
                                                "nesterov": {
                                                    "type": "boolean",
                                                    "description": "enables Nesterov momentum (default: False)"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^decoupled_sgdw($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "lr": {
                                                    "type": "number",
                                                    "description": "Learning rate."
                                                },
                                                "momentum": {
                                                    "type": "number",
                                                    "description": "Momentum factor. Default: ``0``."
                                                },
                                                "weight_decay": {
                                                    "type": "number",
                                                    "description": "Decoupled weight decay factor. Default: ``0``."
                                                },
                                                "dampening": {
                                                    "type": "number",
                                                    "description": "Dampening factor applied to the momentum. Default: ``0``."
                                                },
                                                "nesterov": {
                                                    "type": "boolean",
                                                    "description": "Enables Nesterov momentum updates. Default: ``False``."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^rmsprop($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "lr": {
                                                    "type": "number",
                                                    "description": "learning rate (default: 1e-2)"
                                                },
                                                "alpha": {
                                                    "type": "number",
                                                    "description": "smoothing constant (default: 0.99)"
                                                },
                                                "eps": {
                                                    "type": "number",
                                                    "description": "term added to the denominator to improve\nnumerical stability (default: 1e-8)"
                                                },
                                                "momentum": {
                                                    "type": "number",
                                                    "description": "momentum factor (default: 0)"
                                                },
                                                "weight_decay": {
                                                    "type": "number",
                                                    "description": "weight decay (L2 penalty) (default: 0)"
                                                },
                                                "centered": {
                                                    "type": "number",
                                                    "description": "if ``True``, compute the centered RMSProp,\nthe gradient is normalized by an estimation of its variance"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The optimizer.\nIf ``None``, will be set to ``DecoupledSGDW(model.parameters(), lr=0.1)``. (default: ``None``)\n\n.. seealso:: :mod:`composer.optim` for the different optimizers built into Composer."
                },
                "schedulers": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/20_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/20_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The learning rate schedulers. If ``[]`` or ``None``, the learning rate will be constant.\n(default: ``None``).\n\n.. seealso:: :mod:`composer.optim.scheduler` for the different schedulers built into Composer."
                },
                "scale_schedule_ratio": {
                    "type": "number",
                    "description": "Ratio by which to scale the training duration and learning rate\nschedules. (default: ``1.0``)\n\nE.g., ``0.5`` makes the schedule take half as many epochs and ``2.0`` makes it take twice as\nmany epochs. ``1.0`` means no change.\n\nThis parameter has no effect if ``schedulers`` is not specified.\n\n.. note ::\n\n    Training for less time, while rescaling the learning rate schedule,\n    is a strong baseline approach to speeding up training. E.g., training\n    for half duration often yields minor accuracy degradation,\n    provided that the learning rate schedule is also rescaled to take half as long.\n\n    To see the difference, consider training for half as long using a cosine\n    annealing learning rate schedule. If the schedule is not rescaled,\n    training ends while the learning rate is still ~0.5 of the initial LR.\n    If the schedule is rescaled with ``scale_schedule_ratio``, the LR schedule\n    would finish the entire cosine curve, ending with a learning rate near zero."
                },
                "step_schedulers_every_batch": {
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "By default, native\n`PyTorch schedulers <https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate>`_\nare updated every epoch, while :doc:`Composer Schedulers</trainer/schedulers>` are updated every step.\nSetting this to ``True`` will force schedulers to be stepped every batch,\nwhile ``False`` means schedulers stepped every epoch. ``None`` indicates the default behavior.\n(default: ``None``)"
                },
                "val_dataset": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^ade20k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val', 'test']"
                                                },
                                                "base_size": {
                                                    "type": "integer",
                                                    "description": "Initial size of the image and target before other augmentations"
                                                },
                                                "min_resize_scale": {
                                                    "type": "number",
                                                    "description": "Minimum value that the image and target can be scaled"
                                                },
                                                "max_resize_scale": {
                                                    "type": "number",
                                                    "description": "Maximum value that the image and target can be scaled"
                                                },
                                                "final_size": {
                                                    "type": "integer",
                                                    "description": "Final size of the image and target"
                                                },
                                                "ignore_background": {
                                                    "type": "boolean",
                                                    "description": "If true, ignore the background class in training loss"
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_ade20k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                },
                                                "base_size": {
                                                    "type": "integer",
                                                    "description": "Initial size of the image and target before other augmentations"
                                                },
                                                "min_resize_scale": {
                                                    "type": "number",
                                                    "description": "Minimum value that the image and target can be scaled"
                                                },
                                                "max_resize_scale": {
                                                    "type": "number",
                                                    "description": "Maximum value that the image and target can be scaled"
                                                },
                                                "final_size": {
                                                    "type": "integer",
                                                    "description": "Final size of the image and target"
                                                },
                                                "ignore_background": {
                                                    "type": "boolean",
                                                    "description": "If true, ignore the background class in training loss"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^brats($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "oversampling": {
                                                    "type": "number",
                                                    "description": "oversampling"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^imagenet($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "resize_size": {
                                                    "type": "integer",
                                                    "description": "resize size. Set to -1 to not resize"
                                                },
                                                "crop_size": {
                                                    "type": "integer",
                                                    "description": "crop size"
                                                },
                                                "use_ffcv": {
                                                    "type": "boolean",
                                                    "description": "whether to use ffcv for faster dataloading"
                                                },
                                                "ffcv_cpu_only": {
                                                    "type": "boolean",
                                                    "description": "Use cpu for all transformations."
                                                },
                                                "ffcv_dir": {
                                                    "type": "string",
                                                    "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                                },
                                                "ffcv_dest": {
                                                    "type": "string",
                                                    "description": "<file>.ffcv file that has dataset samples"
                                                },
                                                "ffcv_write_dataset": {
                                                    "type": "boolean",
                                                    "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_imagenet1k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                },
                                                "resize_size": {
                                                    "type": "integer",
                                                    "description": "Resize size. Set to -1 to not resize"
                                                },
                                                "crop_size": {
                                                    "type": "integer",
                                                    "description": "Crop size"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^cifar10($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "download": {
                                                    "type": "boolean",
                                                    "description": "whether to download the dataset, if needed"
                                                },
                                                "use_ffcv": {
                                                    "type": "boolean",
                                                    "description": "whether to use ffcv for faster dataloading"
                                                },
                                                "ffcv_dir": {
                                                    "type": "string",
                                                    "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                                },
                                                "ffcv_dest": {
                                                    "type": "string",
                                                    "description": "<file>.ffcv file that has dataset samples"
                                                },
                                                "ffcv_write_dataset": {
                                                    "type": "boolean",
                                                    "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_cifar10($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^mnist($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "download": {
                                                    "type": "boolean",
                                                    "description": "whether to download the dataset, if needed"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^lm($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "$ref": "#/$defs/21_list"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/21_list"
                                                            }
                                                        }
                                                    ],
                                                    "description": "Path to the Huggingface Datasets directory."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Whether to use 'train', 'validation' or 'test' split."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the tokenizer to preprocess text with."
                                                },
                                                "use_masked_lm": {
                                                    "type": "boolean",
                                                    "description": "Whether the dataset should be encoded with masked language modeling or not."
                                                },
                                                "num_tokens": {
                                                    "type": "integer",
                                                    "description": "If desired, the number of tokens to truncate the dataset to."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If using masked language modeling, the probability to mask tokens with."
                                                },
                                                "seed": {
                                                    "type": "integer",
                                                    "description": "Which seed to use to generate train and validation splits."
                                                },
                                                "subsample_ratio": {
                                                    "type": "number",
                                                    "description": "If desired, the percentage of the dataset to use."
                                                },
                                                "max_seq_length": {
                                                    "type": "integer",
                                                    "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^glue($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "task": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The GLUE task to train on, choose one from: CoLA, MNLI, MRPC, QNLI, QQP, RTE, SST-2, and STS-B."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Whether to use 'train', 'validation' or 'test' split."
                                                },
                                                "max_seq_length": {
                                                    "type": "integer",
                                                    "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                                },
                                                "max_network_retries": {
                                                    "type": "integer",
                                                    "description": "Optionally, the number of times to retry HTTP requests if they fail."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^coco($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_coco($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^c4($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "Whether to drop the last samples for the last batch."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the samples in the dataset. Currently, shards are assigned and consumed with deterministic per-device shard order, but shuffling affects the order of samples via (per-device) shuffle buffers."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "What split of the dataset to use. Either `train` or `validation`."
                                                },
                                                "num_samples": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The number of post-processed token samples, used to set epoch size of the IterableDataset."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "max_seq_len": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The max sequence length of each token sample."
                                                },
                                                "group_method": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "How to group text samples into token samples. Either `truncate` or `concat`."
                                                },
                                                "mlm": {
                                                    "type": "boolean",
                                                    "description": "Whether or not to use masked language modeling."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If `mlm==True`, the probability that tokens are masked."
                                                },
                                                "shuffle_buffer_size": {
                                                    "type": "integer",
                                                    "description": "If `shuffle=True`, samples are read into a buffer of this size (per-device), and randomly sampled from there to produce shuffled samples."
                                                },
                                                "seed": {
                                                    "type": "integer",
                                                    "description": "If `shuffle=True`, what seed to use for shuffling operations."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_c4($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "What split of the dataset to use. Either `train` or `val`."
                                                },
                                                "tokenizer_name": {
                                                    "type": "string",
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "max_seq_len": {
                                                    "type": "integer",
                                                    "description": "The max sequence length of each token sample."
                                                },
                                                "group_method": {
                                                    "type": "string",
                                                    "description": "How to group text samples into token samples. Currently only `truncate` is supported."
                                                },
                                                "mlm": {
                                                    "type": "boolean",
                                                    "description": "Whether or not to use masked language modeling."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If `mlm==True`, the probability that tokens are masked."
                                                },
                                                "max_retries": {
                                                    "type": "integer",
                                                    "description": "Number of download re-attempts before giving up."
                                                },
                                                "timeout": {
                                                    "type": "number",
                                                    "description": "How long to wait for shard to download before raising an exception."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Validation dataset hparams"
                },
                "evaluators": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/24_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/24_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Evaluators"
                },
                "eval_batch_size": {
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "batch size to use for each evaluation step"
                },
                "eval_interval": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Specifies how frequently to run evaluation.\nAn integer, which will be interpreted to be epochs, a str (e.g. ``1ep``, or ``10ba``), a :class:`.Time`\nobject, or a callable.\nDefaults to ``1`` (evaluate every epoch).\n\nIf an integer (in epochs), :class:`.Time` string, or :class:`.Time` instance, the evaluator will be run\nwith this frequency. :class:`.Time` strings or :class:`.Time` instances must have units of\n:attr:`.TimeUnit.BATCH` or :attr:`.TimeUnit.EPOCH`.\n\nSet to ``0`` to disable evaluation.\n\nIf a callable, it should take two arguments (:class:`.State`, :class:`.Event`) and return a bool\nrepresenting whether the evaluator should be invoked. The event will be either :attr:`.Event.BATCH_END`\nor :attr:`.Event.EPOCH_END`.\n\nThis ``eval_interval`` will apply to any :class:`.Evaluator` in ``eval_dataloader`` that does not specify\nan ``eval_interval`` or if a dataloader is passed in directly. This parameter has no effect if\n``eval_dataloader`` is not specified.\n\nWhen specifying time string or integer for the ``eval_interval``, the evaluator(s) are also run at the ``Event.FIT_END`` if it doesn't\nevenly divide the training duration."
                },
                "eval_subset_num_batches": {
                    "type": "integer",
                    "description": "If specified, evaluate on this many batches. Defaults to ``-1``,\nwhich means to iterate over the entire dataloader.\n\nThis parameter has no effect if ``eval_dataloader`` is not specified, it is greater than\n``len(eval_dataloader)``, or ``eval_dataloader`` is an :class:`.Evaluator` and ``subset_num_batches``\nwas specified as part of the :class:`.Evaluator`."
                },
                "callbacks": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/25_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/25_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The callbacks to run during training. If ``None``,\nthen no callbacks will be run. (default: ``None``).\n\n.. seealso:: :mod:`composer.callbacks` for the different callbacks built into Composer."
                },
                "loggers": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/27_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/27_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The destinations to log training information to.\n.. seealso:: :mod:`composer.loggers` for the different loggers built into Composer."
                },
                "run_name": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A name for this training run. If not specified, the timestamp will be combined with a\n:doc:`coolname <coolname:index>`, e.g. ``1654298855-electric-zebra``."
                },
                "progress_bar": {
                    "type": "boolean",
                    "description": "Whether to show a progress bar. (default: ``True``)"
                },
                "log_to_console": {
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Whether to print logging statements to the console. (default: ``None``)\nThe default behavior (when set to ``None``) only prints logging statements when ``progress_bar`` is ``False``."
                },
                "console_log_level": {
                    "enum": [
                        "EPOCH",
                        1,
                        2,
                        3,
                        "epoch",
                        "FIT",
                        "fit",
                        "BATCH",
                        "batch"
                    ],
                    "description": "The maximum log level which\nshould be printed to the console. (default: :attr:`.LogLevel.EPOCH`)\n\nIt can either be :class:`.LogLevel`, a string corresponding to a :class:`.LogLevel`, or a callable\nthat takes the training :class:`.State` and the :class:`.LogLevel` and returns a boolean of whether this\nstatement should be printed.\n\nThis parameter has no effect if ``log_to_console`` is ``False``, or is unspecified and ``progres_bar`` is\n``True``."
                },
                "console_stream": {
                    "type": "string",
                    "description": "The stream to write to. If a string, it can either be\n``'stdout'`` or ``'stderr'``. (default: :attr:`sys.stderr`)"
                },
                "python_log_level": {
                    "type": "string",
                    "description": "Python loglevel to use composer"
                },
                "load_path": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": " The path format string to an existing checkpoint file.\nIt can be a path to a file on the local disk, a URL, or if ``load_object_store`` is set, the object name\nfor a checkpoint in a cloud bucket.\n\nWhen using `Deepspeed ZeRO <https://www.deepspeed.ai/tutorials/zero/>`_, checkpoints are shareded by rank.\nInstead of hard-coding the rank in the ``path``, use the following format variables:\n\n+------------------------+-------------------------------------------------------+\n| Variable               | Description                                           |\n+========================+=======================================================+\n| ``{rank}``             | The global rank, as returned by                       |\n|                        | :func:`~.dist.get_global_rank`.                       |\n+------------------------+-------------------------------------------------------+\n| ``{local_rank}``       | The local rank of the process, as returned by         |\n|                        | :func:`~.dist.get_local_rank`.                        |\n+------------------------+-------------------------------------------------------+\n| ``{node_rank}``        | The node rank, as returned by                         |\n|                        | :func:`~.dist.get_node_rank`.                         |\n+------------------------+-------------------------------------------------------+\n\nFor example, suppose that checkpoints are stored in the following structure:\n\n.. code-block::\n\n    my_model/ep1-rank0.tar\n    my_model/ep1-rank1.tar\n    my_model/ep1-rank2.tar\n    ...\n\nThen, ``load_path`` should be set to ``my_model/ep1-rank{rank}.tar``, and all ranks will load the\ncorrect state.\n\nIf ``None`` then no checkpoint will be loaded. (default: ``None``)"
                },
                "load_object_store": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^libcloud($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "provider": {
                                                    "type": "string",
                                                    "description": "Cloud provider to use. Valid options are:\n* :mod:`~libcloud.storage.drivers.atmos`\n* :mod:`~libcloud.storage.drivers.auroraobjects`\n* :mod:`~libcloud.storage.drivers.azure_blobs`\n* :mod:`~libcloud.storage.drivers.backblaze_b2`\n* :mod:`~libcloud.storage.drivers.cloudfiles`\n* :mod:`~libcloud.storage.drivers.digitalocean_spaces`\n* :mod:`~libcloud.storage.drivers.google_storage`\n* :mod:`~libcloud.storage.drivers.ktucloud`\n* :mod:`~libcloud.storage.drivers.local`\n* :mod:`~libcloud.storage.drivers.minio`\n* :mod:`~libcloud.storage.drivers.nimbus`\n* :mod:`~libcloud.storage.drivers.ninefold`\n* :mod:`~libcloud.storage.drivers.oss`\n* :mod:`~libcloud.storage.drivers.rgw`\n* :mod:`~libcloud.storage.drivers.s3`\n\n.. seealso:: :doc:`Full list of libcloud providers <libcloud:storage/supported_providers>`"
                                                },
                                                "container": {
                                                    "type": "string",
                                                    "description": "The name of the container (i.e. bucket) to use."
                                                },
                                                "key_environ": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of an environment variable containing an API key or username to use to connect to the provider."
                                                },
                                                "secret_environ": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of an environment variable containing an API secret or password to use to connect to the provider."
                                                },
                                                "region": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Cloud region to use"
                                                },
                                                "host": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Override hostname for connections"
                                                },
                                                "port": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Override port for connections"
                                                },
                                                "extra_init_kwargs": {
                                                    "type": "object",
                                                    "description": "Extra keyword arguments to pass into the constructor for the specified provider."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "provider",
                                                "container"
                                            ],
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^s3($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "bucket": {
                                                    "type": "string",
                                                    "description": "The bucket name."
                                                },
                                                "prefix": {
                                                    "type": "string",
                                                    "description": "A path prefix such as `folder/subfolder/` to prepend to object names. Defaults to ''."
                                                },
                                                "region_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The region name. Must be specified if not available in\na config file or environment variables. Defaults to None."
                                                },
                                                "endpoint_url": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The URL to an S3-Compatible object store. Must be specified if using something\nother than Amazon S3, like Google Cloud Storage. Defaults to None."
                                                },
                                                "client_config": {
                                                    "oneOf": [
                                                        {
                                                            "type": "object"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Kwargs dictionary for :class:`botocore.config.Config`. Defaults to None."
                                                },
                                                "transfer_config": {
                                                    "oneOf": [
                                                        {
                                                            "type": "object"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Kwargs dictionary for :class:`boto3.s3.transfer.TransferConfig`. Defaults to None."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "bucket"
                                            ],
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^sftp($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "host": {
                                                    "type": "string",
                                                    "description": "The server to connect to.\nAlso accepts a URI string in the form ``'sftp://username@host:port/./relative/path'``.\nFor an absolute path, use a double `//` -- e.g. ``'sftp://username@host:port//absolute/path'``."
                                                },
                                                "port": {
                                                    "type": "integer",
                                                    "description": "The server port to connect to."
                                                },
                                                "username": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The username (if not specified in the SSH config) needed to authenticate.\nDefaults to None."
                                                },
                                                "known_hosts_filename": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The filename of the known hosts file. If not specified,\nthe default SSH known hosts will be used."
                                                },
                                                "known_hosts_filename_environ": {
                                                    "type": "string",
                                                    "description": "The name of an environment variable containing the path to a SSH known hosts file. Note that `known_hosts_filename` takes precedence over this variable."
                                                },
                                                "key_filename": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The filepath to the a private key (if required) needed to\nauthenticate. Defaults to None. Any keys specified here will be tried *in addition* to any keys\nspecified in ``~/.ssh/`` or via a SSH agent."
                                                },
                                                "key_filename_environ": {
                                                    "type": "string",
                                                    "description": "The name of an environment variable containing the path to a SSH keyfile. Note that `key_filename` takes precedence over this variable."
                                                },
                                                "missing_host_key_policy": {
                                                    "type": "string",
                                                    "description": "The class name or instance of\n:class:`paramiko.client.MissingHostKeyPolicy` to use for a missing host key. Defaults to ``'RejectPolicy'``.\n\nBuilt-in options:\n*   ``'RejectPolicy'`` (the default), which will reject any host key not authorized in the ``known_hosts_filename``.\n*   ``'AutoAddPolicy'``, which will add any unknown host key.\n*   ``'WarningPolicy'``, which will warn on an unknown host key.\n\nFor custom logic, subclass :class:`paramiko.client.MissingHostKeyPolicy`, and provide an instance of this class."
                                                },
                                                "cwd": {
                                                    "type": "string",
                                                    "description": "The directory to navigate to upon creating the SSH connection. If not present\nit will be created."
                                                },
                                                "connect_kwargs": {
                                                    "oneOf": [
                                                        {
                                                            "type": "object"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Any additional kwargs to pass through to :meth:`.SSHClient.connect`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "host"
                                            ],
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "If the checkpoint is in an object store (i.e. AWS S3 or Google Cloud Storage), the parameters for connecting to the cloud provider object store. Otherwise, if the checkpoint is a local filepath, leave blank. This parameter has no effect if `load_path` is not specified."
                },
                "load_logger_destination": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^file($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "filename": {
                                                    "type": "string",
                                                    "description": "Format string for the filename.\nThe following format variables are available:\n\n\n+------------------------+-------------------------------------------------------+\n| Variable               | Description                                           |\n+========================+=======================================================+\n| ``{run_name}``         | The name of the training run. See                     |\n|                        | :attr:`~composer.loggers.logger.Logger.run_name`.     |\n+------------------------+-------------------------------------------------------+\n| ``{rank}``             | The global rank, as returned by                       |\n|                        | :func:`~composer.utils.dist.get_global_rank`.         |\n+------------------------+-------------------------------------------------------+\n| ``{local_rank}``       | The local rank of the process, as returned by         |\n|                        | :func:`~composer.utils.dist.get_local_rank`.          |\n+------------------------+-------------------------------------------------------+\n| ``{world_size}``       | The world size, as returned by                        |\n|                        | :func:`~composer.utils.dist.get_world_size`.          |\n+------------------------+-------------------------------------------------------+\n| ``{local_world_size}`` | The local world size, as returned by                  |\n|                        | :func:`~composer.utils.dist.get_local_world_size`.    |\n+------------------------+-------------------------------------------------------+\n| ``{node_rank}``        | The node rank, as returned by                         |\n|                        | :func:`~composer.utils.dist.get_node_rank`.           |\n+------------------------+-------------------------------------------------------+\n\n\n.. note::\n\n    When training with multiple devices (i.e. GPUs), ensure that ``'{rank}'`` appears in the format.\n    Otherwise, multiple processes may attempt to write to the same file.\n\nConsider the following example when using default value of '{run_name}/logs-rank{rank}.txt':\n\n>>> file_logger = FileLogger(filename='{run_name}/logs-rank{rank}.txt')\n>>> trainer = Trainer(loggers=[file_logger], run_name='my-awesome-run')\n>>> file_logger.filename\n'my-awesome-run/logs-rank0.txt'\n\nDefault: `'{run_name}/logs-rank{rank}.txt'`"
                                                },
                                                "artifact_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Format string for the logfile's artifact name.\nThe logfile will be periodically logged (according to the ``flush_interval``) as a file artifact.\nThe artifact name will be determined by this format string.\n\n.. seealso:: :meth:`~composer.loggers.logger.Logger.log_file_artifact` for file artifact logging.\n\nThe same format variables for ``filename`` are available. Setting this parameter to ``None``\n(the default) will use the same format string as ``filename``. It is sometimes helpful to deviate\nfrom this default. For example, when ``filename`` contains an absolute path, it is recommended to\nset this parameter explicitely, so the absolute path does not appear in any artifact stores.\n\nLeading slashes (``'/'``) will be stripped.\n\nDefault: ``None`` (which uses the same format string as ``filename``)"
                                                },
                                                "capture_stdout": {
                                                    "type": "boolean",
                                                    "description": "Whether to include the ``stdout``in ``filename``. (default: ``True``)"
                                                },
                                                "capture_stderr": {
                                                    "type": "boolean",
                                                    "description": "Whether to include the ``stderr``in ``filename``. (default: ``True``)"
                                                },
                                                "buffer_size": {
                                                    "type": "integer",
                                                    "description": "Buffer size. See :py:func:`open`.\nDefault: ``1`` for line buffering."
                                                },
                                                "log_level": {
                                                    "enum": [
                                                        "EPOCH",
                                                        1,
                                                        2,
                                                        3,
                                                        "epoch",
                                                        "FIT",
                                                        "fit",
                                                        "BATCH",
                                                        "batch"
                                                    ],
                                                    "description": ":class:`~.logger.LogLevel` (i.e. unit of resolution) at\nwhich to record. Default: :attr:`~.LogLevel.EPOCH`."
                                                },
                                                "log_interval": {
                                                    "type": "integer",
                                                    "description": "Frequency to print logs. If ``log_level`` is :attr:`~.LogLevel.EPOCH`,\nlogs will only be recorded every n epochs. If ``log_level`` is\n:attr:`~.LogLevel.BATCH`, logs will be printed every n batches.  Otherwise, if\n``log_level`` is :attr:`~.LogLevel.FIT`, this parameter is ignored, as calls\nat the :attr:`~.LogLevel.FIT` log level are always recorded. Default: ``1``."
                                                },
                                                "flush_interval": {
                                                    "type": "integer",
                                                    "description": "How frequently to flush the log to the file,\nrelative to the ``log_level``. For example, if the ``log_level`` is\n:attr:`~.LogLevel.EPOCH`, then the logfile will be flushed every n epochs.  If\nthe ``log_level`` is :attr:`~.LogLevel.BATCH`, then the logfile will be\nflushed every n batches. Default: ``100``."
                                                },
                                                "overwrite": {
                                                    "type": "boolean",
                                                    "description": "Whether to overwrite an existing logfile. (default: ``False``)"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^wandb($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "project": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "WandB project name."
                                                },
                                                "group": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "WandB group name."
                                                },
                                                "name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "WandB run name.\nIf not specified, the :attr:`.State.run_name` will be used."
                                                },
                                                "entity": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "WandB entity name."
                                                },
                                                "tags": {
                                                    "oneOf": [
                                                        {
                                                            "$ref": "#/$defs/28_list"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/28_list"
                                                            }
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "WandB tags."
                                                },
                                                "log_artifacts": {
                                                    "type": "boolean",
                                                    "description": "Whether to log\n`artifacts <https://docs.wandb.ai/ref/python/artifact>`_ (Default: ``False``)."
                                                },
                                                "rank_zero_only": {
                                                    "type": "boolean",
                                                    "description": "Whether to log only on the rank-zero process.\nWhen logging `artifacts <https://docs.wandb.ai/ref/python/artifact>`_, it is\nhighly recommended to log on all ranks.  Artifacts from ranks \u22651 will not be\nstored, which may discard pertinent information. For example, when using\nDeepspeed ZeRO, it would be impossible to restore from checkpoints without\nartifacts from all ranks (default: ``False``)."
                                                },
                                                "init_kwargs": {
                                                    "oneOf": [
                                                        {
                                                            "type": "object"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Any additional init kwargs\n``wandb.init`` (see\n`WandB documentation <https://docs.wandb.ai/ref/python/init>`_)."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^progress_bar($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "progress_bar": {
                                                    "type": "boolean",
                                                    "description": "Whether to show a progress bar. (default: ``True``)"
                                                },
                                                "log_to_console": {
                                                    "oneOf": [
                                                        {
                                                            "type": "boolean"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Whether to print logging statements to the console. (default: ``None``)\nThe default behavior (when set to ``None``) only prints logging statements when ``progress_bar`` is\n``False``."
                                                },
                                                "console_log_level": {
                                                    "enum": [
                                                        "EPOCH",
                                                        1,
                                                        2,
                                                        3,
                                                        "epoch",
                                                        "FIT",
                                                        "fit",
                                                        "BATCH",
                                                        "batch"
                                                    ],
                                                    "description": "The maximum log level for which statements\nshould be printed. (default: :attr:`.LogLevel.EPOCH`)\n\nIt can either be :class:`.LogLevel`, a string corresponding to a :class:`.LogLevel`, or a callable that\ntakes the training :class:`.State` and the :class:`.LogLevel` and returns a boolean of whether this\nstatement should be printed.\n\nThis parameter has no effect if ``log_to_console`` is ``False`` or is unspecified when ``progress_bar`` is\n``True``."
                                                },
                                                "stream": {
                                                    "type": "string",
                                                    "description": "The console stream to use. If a string, it can either be ``'stdout'`` or\n``'stderr'``. (default: :attr:`sys.stderr`)"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^tensorboard($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "log_dir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the directory where all the tensorboard logs\nwill be saved. This is also the value that should be specified when starting\na tensorboard server. e.g. `tensorboard --logdir={log_dir}`. If not specified\n`./tensorboard_logs` will be used."
                                                },
                                                "flush_interval": {
                                                    "type": "integer",
                                                    "description": "How frequently by batch to flush the log to a file.\nFor example, a flush interval of 10 means the log will be flushed to a file\nevery 10 batches. The logs will also be automatically flushed at the start and\nend of every evaluation phase (`EVENT.EVAL_START` and `EVENT.EVAL_END` ),\nthe end of every epoch (`EVENT.EPOCH_END`), and the end of training\n(`EVENT.FIT_END`). Default: ``100``."
                                                },
                                                "rank_zero_only": {
                                                    "type": "boolean",
                                                    "description": "Whether to log only on the rank-zero process.\nRecommended to be true since the rank 0 will have access to most global metrics.\nA setting of `False` may lead to logging of duplicate values.\nDefault: :attr:`True`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^in_memory($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "log_level": {
                                                    "enum": [
                                                        "EPOCH",
                                                        1,
                                                        2,
                                                        3,
                                                        "epoch",
                                                        "FIT",
                                                        "fit",
                                                        "BATCH",
                                                        "batch"
                                                    ],
                                                    "description": ":class:`~.logger.LogLevel` (i.e. unit of resolution) at\nwhich to record. Defaults to\n:attr:`~.LogLevel.BATCH`, which records\neverything."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^object_store($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "object_store_hparams": {
                                                    "anyOf": [
                                                        {
                                                            "type": "object",
                                                            "patternProperties": {
                                                                "^libcloud($|\\+)": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "provider": {
                                                                            "type": "string",
                                                                            "description": "Cloud provider to use. Valid options are:\n* :mod:`~libcloud.storage.drivers.atmos`\n* :mod:`~libcloud.storage.drivers.auroraobjects`\n* :mod:`~libcloud.storage.drivers.azure_blobs`\n* :mod:`~libcloud.storage.drivers.backblaze_b2`\n* :mod:`~libcloud.storage.drivers.cloudfiles`\n* :mod:`~libcloud.storage.drivers.digitalocean_spaces`\n* :mod:`~libcloud.storage.drivers.google_storage`\n* :mod:`~libcloud.storage.drivers.ktucloud`\n* :mod:`~libcloud.storage.drivers.local`\n* :mod:`~libcloud.storage.drivers.minio`\n* :mod:`~libcloud.storage.drivers.nimbus`\n* :mod:`~libcloud.storage.drivers.ninefold`\n* :mod:`~libcloud.storage.drivers.oss`\n* :mod:`~libcloud.storage.drivers.rgw`\n* :mod:`~libcloud.storage.drivers.s3`\n\n.. seealso:: :doc:`Full list of libcloud providers <libcloud:storage/supported_providers>`"
                                                                        },
                                                                        "container": {
                                                                            "type": "string",
                                                                            "description": "The name of the container (i.e. bucket) to use."
                                                                        },
                                                                        "key_environ": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "string"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "The name of an environment variable containing an API key or username to use to connect to the provider."
                                                                        },
                                                                        "secret_environ": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "string"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "The name of an environment variable containing an API secret or password to use to connect to the provider."
                                                                        },
                                                                        "region": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "string"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "Cloud region to use"
                                                                        },
                                                                        "host": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "string"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "Override hostname for connections"
                                                                        },
                                                                        "port": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "integer"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "Override port for connections"
                                                                        },
                                                                        "extra_init_kwargs": {
                                                                            "type": "object",
                                                                            "description": "Extra keyword arguments to pass into the constructor for the specified provider."
                                                                        }
                                                                    },
                                                                    "additionalProperties": false,
                                                                    "required": [
                                                                        "provider",
                                                                        "container"
                                                                    ],
                                                                    "referenced": false
                                                                }
                                                            },
                                                            "additionalProperties": false
                                                        },
                                                        {
                                                            "type": "object",
                                                            "patternProperties": {
                                                                "^s3($|\\+)": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "bucket": {
                                                                            "type": "string",
                                                                            "description": "The bucket name."
                                                                        },
                                                                        "prefix": {
                                                                            "type": "string",
                                                                            "description": "A path prefix such as `folder/subfolder/` to prepend to object names. Defaults to ''."
                                                                        },
                                                                        "region_name": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "string"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "The region name. Must be specified if not available in\na config file or environment variables. Defaults to None."
                                                                        },
                                                                        "endpoint_url": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "string"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "The URL to an S3-Compatible object store. Must be specified if using something\nother than Amazon S3, like Google Cloud Storage. Defaults to None."
                                                                        },
                                                                        "client_config": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "object"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "Kwargs dictionary for :class:`botocore.config.Config`. Defaults to None."
                                                                        },
                                                                        "transfer_config": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "object"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "Kwargs dictionary for :class:`boto3.s3.transfer.TransferConfig`. Defaults to None."
                                                                        }
                                                                    },
                                                                    "additionalProperties": false,
                                                                    "required": [
                                                                        "bucket"
                                                                    ],
                                                                    "referenced": false
                                                                }
                                                            },
                                                            "additionalProperties": false
                                                        },
                                                        {
                                                            "type": "object",
                                                            "patternProperties": {
                                                                "^sftp($|\\+)": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "host": {
                                                                            "type": "string",
                                                                            "description": "The server to connect to.\nAlso accepts a URI string in the form ``'sftp://username@host:port/./relative/path'``.\nFor an absolute path, use a double `//` -- e.g. ``'sftp://username@host:port//absolute/path'``."
                                                                        },
                                                                        "port": {
                                                                            "type": "integer",
                                                                            "description": "The server port to connect to."
                                                                        },
                                                                        "username": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "string"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "The username (if not specified in the SSH config) needed to authenticate.\nDefaults to None."
                                                                        },
                                                                        "known_hosts_filename": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "string"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "The filename of the known hosts file. If not specified,\nthe default SSH known hosts will be used."
                                                                        },
                                                                        "known_hosts_filename_environ": {
                                                                            "type": "string",
                                                                            "description": "The name of an environment variable containing the path to a SSH known hosts file. Note that `known_hosts_filename` takes precedence over this variable."
                                                                        },
                                                                        "key_filename": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "string"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "The filepath to the a private key (if required) needed to\nauthenticate. Defaults to None. Any keys specified here will be tried *in addition* to any keys\nspecified in ``~/.ssh/`` or via a SSH agent."
                                                                        },
                                                                        "key_filename_environ": {
                                                                            "type": "string",
                                                                            "description": "The name of an environment variable containing the path to a SSH keyfile. Note that `key_filename` takes precedence over this variable."
                                                                        },
                                                                        "missing_host_key_policy": {
                                                                            "type": "string",
                                                                            "description": "The class name or instance of\n:class:`paramiko.client.MissingHostKeyPolicy` to use for a missing host key. Defaults to ``'RejectPolicy'``.\n\nBuilt-in options:\n*   ``'RejectPolicy'`` (the default), which will reject any host key not authorized in the ``known_hosts_filename``.\n*   ``'AutoAddPolicy'``, which will add any unknown host key.\n*   ``'WarningPolicy'``, which will warn on an unknown host key.\n\nFor custom logic, subclass :class:`paramiko.client.MissingHostKeyPolicy`, and provide an instance of this class."
                                                                        },
                                                                        "cwd": {
                                                                            "type": "string",
                                                                            "description": "The directory to navigate to upon creating the SSH connection. If not present\nit will be created."
                                                                        },
                                                                        "connect_kwargs": {
                                                                            "oneOf": [
                                                                                {
                                                                                    "type": "object"
                                                                                },
                                                                                {
                                                                                    "type": "null"
                                                                                }
                                                                            ],
                                                                            "description": "Any additional kwargs to pass through to :meth:`.SSHClient.connect`."
                                                                        }
                                                                    },
                                                                    "additionalProperties": false,
                                                                    "required": [
                                                                        "host"
                                                                    ],
                                                                    "referenced": false
                                                                }
                                                            },
                                                            "additionalProperties": false
                                                        }
                                                    ],
                                                    "description": "Object store provider hparams."
                                                },
                                                "should_log_artifact": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Path to a filter function which returns whether an artifact should be logged."
                                                },
                                                "object_name": {
                                                    "type": "string",
                                                    "description": "A format string used to determine the object name.\nThe following format variables are available:\n\n+------------------------+-------------------------------------------------------+\n| Variable               | Description                                           |\n+========================+=======================================================+\n| ``{artifact_name}``    | The name of the artifact being logged.                |\n+------------------------+-------------------------------------------------------+\n| ``{run_name}``         | The name of the training run. See                     |\n|                        | :attr:`.State.run_name`.                              |\n+------------------------+-------------------------------------------------------+\n| ``{rank}``             | The global rank, as returned by                       |\n|                        | :func:`~composer.utils.dist.get_global_rank`.         |\n+------------------------+-------------------------------------------------------+\n| ``{local_rank}``       | The local rank of the process, as returned by         |\n|                        | :func:`~composer.utils.dist.get_local_rank`.          |\n+------------------------+-------------------------------------------------------+\n| ``{world_size}``       | The world size, as returned by                        |\n|                        | :func:`~composer.utils.dist.get_world_size`.          |\n+------------------------+-------------------------------------------------------+\n| ``{local_world_size}`` | The local world size, as returned by                  |\n|                        | :func:`~composer.utils.dist.get_local_world_size`.    |\n+------------------------+-------------------------------------------------------+\n| ``{node_rank}``        | The node rank, as returned by                         |\n|                        | :func:`~composer.utils.dist.get_node_rank`.           |\n+------------------------+-------------------------------------------------------+\n\nLeading slashes (``'/'``) will be stripped.\n\nConsider the following example, which subfolders the artifacts by their rank:\n\n.. testsetup:: composer.loggers.object_store_logger.ObjectStoreLogger.__init__.object_name\n\n    import os\n\n    os.makedirs('path/to', exist_ok=True)\n\n    with open('path/to/file.txt', 'w+') as f:\n        f.write('hi')\n\n.. doctest:: composer.loggers.object_store_logger.ObjectStoreLogger.__init__.object_name\n\n    >>> object_store_logger = ObjectStoreLogger(..., object_name='rank_{rank}/{artifact_name}')\n    >>> trainer = Trainer(..., run_name='foo', loggers=[object_store_logger])\n    >>> trainer.logger.file_artifact(\n    ...     log_level=LogLevel.EPOCH,\n    ...     artifact_name='bar.txt',\n    ...     file_path='path/to/file.txt',\n    ... )\n\n.. testcleanup:: composer.loggers.object_store_logger.ObjectStoreLogger.__init__.object_name\n\n    # Shut down the uploader\n    object_store_logger._check_workers()\n    object_store_logger.post_close()\n\nAssuming that the process's rank is ``0``, the object store would store the contents of\n``'path/to/file.txt'`` in an object named ``'rank0/bar.txt'``.\n\nDefault: ``'{artifact_name}'``"
                                                },
                                                "num_concurrent_uploads": {
                                                    "type": "integer",
                                                    "description": "Maximum number of concurrent uploads. Defaults to 4."
                                                },
                                                "use_procs": {
                                                    "type": "boolean",
                                                    "description": "Whether to perform file uploads in background processes (as opposed to threads).\nDefaults to True."
                                                },
                                                "upload_staging_folder": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "A folder to use for staging uploads.\nIf not specified, defaults to using a :func:`~tempfile.TemporaryDirectory`."
                                                },
                                                "num_attempts": {
                                                    "type": "integer",
                                                    "description": "For operations that fail with a transient error, the number of attempts to make.\nDefaults to 3."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "object_store_hparams"
                                            ],
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Alternative argument to `load_object_store` to support loading from a logger destination. This parameter has no effect if `load_path` is not specified or `load_object_store` is specified, which will be used instead of this."
                },
                "load_weights_only": {
                    "type": "boolean",
                    "description": "Whether or not to only restore the weights from the checkpoint without\nrestoring the associated state. Ignored if ``load_path`` is ``None``. (default: ``False``)"
                },
                "load_strict_model_weights": {
                    "type": "boolean",
                    "description": "Ensure that the set of weights in the checkpoint and model must exactly match.\nIgnored if ``load_path`` is ``None``. (default: ``False``)"
                },
                "load_ignore_keys": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/29_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/29_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "A list of paths for the ``state_dict`` of the checkpoint,\nwhich, when provided, will be ignored from the state_dict before a checkpoint is loaded. Each path is a list\nof strings specifying the keys to index into ``state_dict`` joined together with `/` as a seperator (as PyTorch\nuses `.` in parameter names). If a prefix is provided, all children are also ignored (see Example 2).\nSee :mod:`composer.core.state` for the structure of state_dict.\n\nExample 1: ``load_ignore_keys = [\"state/model/layer1.weights\", \"state/model/layer1.bias\"]`` would ignore\nlayer 1 weights and bias.\n\nExample 2: ``load_ignore_keys = [\"state/model/*\"]`` would ignore the entire model, which would have the same\neffect as the previous example if there was only 1 layer.\n\nExample 3: ``load_ignore_keys = [\"state/model/layer*.weights\"]`` would ignore all weights in the model.\n\nExample 4: ``load_ignore_keys = [\"state/rank_zero_seed\", \"rng\"]`` would reset all randomness when\nloading the checkpoint.\n\nIf a callable, it should take one argument which is the state_dict. The callable is free to arbitrarily modify\nthe state_dict before it is loaded.\n\n(default: ``None``)"
                },
                "load_progress_bar": {
                    "type": "boolean",
                    "description": "Display the progress bar for downloading the checkpoint.\nIgnored if ``load_path`` is either ``None`` or a local file path. (default: ``True``)"
                },
                "save_folder": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Format string for the folder where checkpoints are saved.\nIf ``None``, checkpoints will not be saved. (default: ``None``)\n\n.. seealso:: :class:`~.CheckpointSaver`\n\n.. note::\n\n    For fine-grained control on checkpoint saving (e.g. to save different types of checkpoints\n    at different intervals), leave this parameter as ``None``, and instead pass\n    instance(s) of :class:`~.CheckpointSaver` directly as ``callbacks``."
                },
                "save_filename": {
                    "type": "string",
                    "description": "A format string describing how to name checkpoints.\nThis parameter has no effect if ``save_folder`` is ``None``.\n(default: ``\"ep{epoch}-ba{batch}-rank{rank}\"``)\n\n.. seealso:: :class:`~.CheckpointSaver`"
                },
                "save_artifact_name": {
                    "type": "string",
                    "description": "A format string describing how to name checkpoints in loggers.\nThis parameter has no effect if ``save_folder`` is ``None``.\n(default: ``\"{run_name}/checkpoints/ep{epoch}-ba{batch}-rank{rank}\"``)\n\n.. seealso:: :class:`~.CheckpointSaver`"
                },
                "save_latest_filename": {
                    "type": "string",
                    "description": "A format string for the name of a symlink\n(relative to ``save_folder``) that points to the last saved checkpoint.\nThis parameter has no effect if ``save_folder`` is ``None``.\nTo disable symlinking, set this to ``None``. (default: ``\"latest-rank{rank}\"``)\n\n.. seealso:: :class:`~.CheckpointSaver`"
                },
                "save_latest_artifact_name": {
                    "type": "string",
                    "description": "A format string describing how to name symlinks in loggers.\nThis parameter has no effect if ``save_folder``, ``save_latest_filename``, or ``save_artifact_name`` are ``None``.\nTo disable symlinking in logger, set this or ``save_latest_filename`` to ``None``. (default: ``\"{run_name}/checkpoints/latest-rank{rank}\"``)\n\n.. seealso:: :class:`~.CheckpointSaver`"
                },
                "save_overwrite": {
                    "type": "boolean",
                    "description": "Whether existing checkpoints should be overridden.\nThis parameter has no effect if ``save_folder`` is None. (default: ``False``)\n\n.. seealso:: :class:`~.CheckpointSaver`"
                },
                "save_weights_only": {
                    "type": "boolean",
                    "description": "Whether to save only the model weights instead of the entire training\nstate. This parameter has no effect if ``save_folder`` is ``None``. (default: ``False``)\n\n.. seealso:: :class:`~.CheckpointSaver`"
                },
                "save_interval": {
                    "type": "string",
                    "description": "A :class:`Time`, time-string, integer (in epochs),\nor a function that takes (state, event) and returns a boolean whether a checkpoint should be saved.\nThis parameter has no effect if ``save_folder`` is ``None``. (default: ``'1ep'``)\n\n.. seealso:: :class:`~.CheckpointSaver`"
                },
                "save_num_checkpoints_to_keep": {
                    "type": "integer",
                    "description": "The number of checkpoints to keep locally. The oldest checkpoints\nare removed first. Set to ``-1`` to keep all checkpoints locally. (default: ``-1``)\n\nCheckpoints will be removed after they have been logged as a file artifact. For example, when this callback\nis used in conjunction with the :class:`~composer.loggers.object_store_logger.ObjectStoreLogger`, set this\nparameter to ``0`` to immediately delete checkpoints from the local disk after they have been uploaded to\nthe object store.\n\nThis parameter only controls how many checkpoints are kept locally; checkpoints are not deleted from\nartifact stores."
                },
                "autoresume": {
                    "type": "boolean",
                    "description": "Whether or not to enable autoresume, which allows for stopping and resuming"
                },
                "deepspeed_config": {
                    "oneOf": [
                        {
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Configuration for DeepSpeed, formatted as a JSON\naccording to `DeepSpeed's documentation <https://www.deepspeed.ai/docs/config-json/>`_. (default: ``None``)\n\nTo use DeepSpeed with default values, set to the empty dictionary ``{}``.\nTo disable DeepSpeed (the default), set to ``None``."
                },
                "device": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^gpu($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "device_id": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Integer ID of a GPU device to train with. If not specified, the local rank\nof the current process is used. Default: None."
                                                },
                                                "allow_tf32": {
                                                    "type": "boolean",
                                                    "description": "Whether to allow TF32 matrix multiplications. Defaults to True.\nFor more information, see :ref:`torch:tf32_on_ampere`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^cpu($|\\+)": {
                                            "type": "object",
                                            "properties": {},
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The device to use for training, which can be ``'cpu'`` or ``'gpu'``.\n(default: ``None``)\n\nThe default behavior sets the device to ``'gpu'`` if CUDA is available; otherwise, it sets the device to\n``'cpu'``."
                },
                "precision": {
                    "oneOf": [
                        {
                            "enum": [
                                "bf16",
                                "fp32",
                                "AMP",
                                "BF16",
                                "amp",
                                "FP16",
                                "fp16",
                                "FP32"
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Numerical precision to use for training. One of ``fp32``, ``fp16``\nor ``amp`` (recommended). (default: ``Precision.FP32`` if training on CPU; ``Precision.AMP`` if training\non GPU)\n\n.. note::\n    ``fp16`` only works if ``deepspeed_config`` is also provided."
                },
                "grad_accum": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The number of microbatches to split a per-device batch into. Gradients\nare summed over the microbatches per device. If set to ``auto``, dynamically increases grad_accum\nif microbatch is too large for GPU. (default: ``1``)\n\n.. note:: This is implemented by taking the batch yielded by the ``train_dataloader`` and splitting\n    it into ``grad_accum`` sections. Each section is of size ``train_dataloader // grad_accum``.\n    If the batch size of the dataloader is not divisible by ``grad_accum``,\n    then the last section will be of size ``batch_size mod grad_accum``."
                },
                "seed": {
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The seed used in randomization. If ``None``, then a random seed\nwill be created. (default: ``None``)\n\n.. note:: In order to get reproducible results, call the\n    :func:`.seed_all` function at the start of your script with the seed\n    passed to the trainer. This will ensure any initialization done before the trainer init\n    (ex. model weight initialization) also uses the provided seed.\n\n.. seealso:: :mod:`composer.utils.reproducibility` for more details on reproducibility."
                },
                "deterministic_mode": {
                    "type": "boolean",
                    "description": "Run the model deterministically. (default: ``False``)\n.. note:: This is an experimental feature. Performance degradations expected. Certain Torch modules may\n    not have deterministic implementations, which will result in a crash.\n\n.. note:: In order to get reproducible results, call the\n    :func:`.configure_deterministic_mode` function at the start of your script.\n    This will ensure any initialization done before the trainer init also runs deterministically.\n\n.. seealso:: :mod:`composer.utils.reproducibility` for more details on reproducibility."
                },
                "dist_timeout": {
                    "type": "number",
                    "description": "Timeout, in seconds, for initializing the distributed process group.\n(default: ``15.0``)"
                },
                "ddp_sync_strategy": {
                    "oneOf": [
                        {
                            "enum": [
                                "single_auto_sync",
                                "SINGLE_AUTO_SYNC",
                                "FORCED_SYNC",
                                "MULTI_AUTO_SYNC",
                                "forced_sync",
                                "multi_auto_sync"
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The strategy to use for synchronizing gradients.\nLeave unset to let the trainer auto-configure this. See :class:`.DDPSyncStrategy`\nfor more details."
                },
                "grad_clip_norm": {
                    "type": "number",
                    "description": "The norm to clip gradient magnitudes to. Set to ``-1`` for no gradient\nclipping. (default: ``-1``).\n\n.. deprecated:: 0.8\n   Deprecated. Please use composer.algorithms.GradientClipping."
                },
                "profiler": {
                    "oneOf": [
                        {
                            "type": "object",
                            "properties": {
                                "schedule": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "patternProperties": {
                                                "^cyclic($|\\+)": {
                                                    "type": "object"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ],
                                    "description": "The profiling scheduling function.\nIt takes the training state and returns a :class:`.ProfilerAction`.\nFor convenience, Composer includes a :meth:`~composer.profiler.cyclic_schedule.cyclic_schedule` helper.\n\n.. testsetup::\n\n    from composer.profiler import Profiler, cyclic_schedule\n\n    original_profiler_init = Profiler.__init__\n\n    def new_profiler_init(self, dummy_ellipsis=None, **kwargs):\n        if 'trace_handlers' not in kwargs:\n            kwargs['trace_handlers'] = []\n        original_profiler_init(self, **kwargs)\n\n    Profiler.__init__ = new_profiler_init\n\n.. testcode::\n\n    from composer.profiler import Profiler, cyclic_schedule\n\n    profiler = Profiler(\n        ...,\n        schedule=cyclic_schedule(\n            skip_first=1,\n            wait=0,\n            warmup=1,\n            active=4,\n            repeat=1,\n        ),\n    )"
                                },
                                "trace_handlers": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/30_list"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/$defs/30_list"
                                            }
                                        }
                                    ],
                                    "description": "Trace handlers which record and\nsave profiling data to traces."
                                },
                                "sys_prof_cpu": {
                                    "type": "boolean",
                                    "description": "Whether to record cpu statistics. (default: ``True``)."
                                },
                                "sys_prof_memory": {
                                    "type": "boolean",
                                    "description": "Whether to record memory statistics. (default: ``False``)."
                                },
                                "sys_prof_disk": {
                                    "type": "boolean",
                                    "description": "Whether to record disk statistics. (default: ``False``)."
                                },
                                "sys_prof_net": {
                                    "type": "boolean",
                                    "description": "Whether to record network statistics. (default: ``False``)."
                                },
                                "sys_prof_stats_thread_interval_seconds": {
                                    "type": "number",
                                    "description": "Interval to record stats, in seconds.\n(default: ``0.5``)."
                                },
                                "torch_prof_folder": {
                                    "type": "string",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                },
                                "torch_prof_filename": {
                                    "type": "string",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                },
                                "torch_prof_artifact_name": {
                                    "type": "string",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                },
                                "torch_prof_overwrite": {
                                    "type": "boolean",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                },
                                "torch_prof_use_gzip": {
                                    "type": "boolean",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                },
                                "torch_prof_record_shapes": {
                                    "type": "boolean",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                },
                                "torch_prof_profile_memory": {
                                    "type": "boolean",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                },
                                "torch_prof_with_stack": {
                                    "type": "boolean",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                },
                                "torch_prof_with_flops": {
                                    "type": "boolean",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                },
                                "torch_prof_num_traces_to_keep": {
                                    "type": "integer",
                                    "description": "See :class:`~composer.profiler.torch_profiler.TorchProfiler`."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "schedule",
                                "trace_handlers"
                            ],
                            "referenced": false
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The profiler, if profiling should be enabled. (default: ``None``)\n.. seealso::\n\n    See the :doc:`Profiling Guide </trainer/performance_tutorials/profiling>` for\n    additional information."
                }
            },
            "additionalProperties": false,
            "required": [
                "model"
            ],
            "referenced": false,
            "description": "Trainer hparams"
        },
        "fits": {
            "oneOf": [
                {
                    "$ref": "#/$defs/39_list"
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/39_list"
                    }
                }
            ],
            "description": "Fit hparams"
        },
        "evals": {
            "oneOf": [
                {
                    "$ref": "#/$defs/42_list"
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/42_list"
                    }
                }
            ],
            "description": "Eval hparams"
        }
    },
    "additionalProperties": false,
    "required": [
        "trainer"
    ],
    "referenced": false,
    "$defs": {
        "0_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "1_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "2_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "3_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "4_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "5_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "6_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "7_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "8_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "9_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "10_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "11_list": {
            "enum": [
                "LINEAR_LOG_CONSTANT_BIAS",
                "BN_UNIFORM",
                "kaiming_normal",
                "bn_uniform",
                "XAVIER_UNIFORM",
                "xavier_uniform",
                "xavier_normal",
                "KAIMING_UNIFORM",
                "kaiming_uniform",
                "XAVIER_NORMAL",
                "BN_ONES",
                "KAIMING_NORMAL",
                "linear_log_constant_bias",
                "bn_ones"
            ]
        },
        "12_list": {
            "type": "string"
        },
        "13_list": {
            "anyOf": [
                {
                    "type": "object",
                    "patternProperties": {
                        "^blurpool($|\\+)": {
                            "type": "object",
                            "properties": {
                                "replace_convs": {
                                    "type": "boolean",
                                    "description": "replace strided :class:`torch.nn.Conv2d` modules with\n:class:`.BlurConv2d` modules. Default: ``True``."
                                },
                                "replace_maxpools": {
                                    "type": "boolean",
                                    "description": "replace eligible :class:`torch.nn.MaxPool2d` modules\nwith :class:`.BlurMaxPool2d` modules. Default: ``True``."
                                },
                                "blur_first": {
                                    "type": "boolean",
                                    "description": "when ``replace_convs`` is ``True``, blur input before the\nassociated convolution. When set to ``False``, the convolution is\napplied with a stride of 1 before the blurring, resulting in\nsignificant overhead (though more closely matching the paper).\nSee :class:`.BlurConv2d` for further discussion. Default: ``True``."
                                },
                                "min_channels": {
                                    "type": "integer",
                                    "description": "Skip replacing layers with in_channels < min_channels.\nCommonly used to prevent the blurring of the first layer. Default: 16."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^channels_last($|\\+)": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^seq_length_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "duration": {
                                    "type": "number",
                                    "description": "Fraction of total training for sequential length\nlearning. Default = ``0.3``."
                                },
                                "min_seq_length": {
                                    "type": "integer",
                                    "description": "Minimum sequence length to start the warmup.\nDefault = ``8``."
                                },
                                "max_seq_length": {
                                    "type": "integer",
                                    "description": "Maximum sequence length to stop the warmup.\nDefault = ``1024``."
                                },
                                "step_size": {
                                    "type": "integer",
                                    "description": "Step size of sequence length. Default = ``8``."
                                },
                                "truncate": {
                                    "type": "boolean",
                                    "description": "Truncate sequences early, or reshape tensors to create\nnew examples out of the extra tokens. Default: ``True``."
                                },
                                "preserve_end_of_sequence": {
                                    "type": "boolean",
                                    "description": "Preserve the end-of-sequence of the batch when\ntruncating. Useful when input formats include a unique end-of-sequence token.\nIgnored if ``truncate=False``. Default: ``False``.\nE.g., if ``batch[\"input_ids\"]`` is ``[[10, 11, 12, 13, 14, 15]]``\nand ``curr_seq_length=3``, ``\"input_ids\"`` in the returned batch would be\n``[[10, 11, 12]]`` with ``preserve_end_of_sequence=False`` and would be\n``[[10, 11, 15]]`` with ``preserve_end_of_sequence=True``. This behavior applies to any\nbatch tensor with 2 or more dimensions."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^cutmix($|\\+)": {
                            "type": "object",
                            "properties": {
                                "alpha": {
                                    "type": "number",
                                    "description": "the psuedocount for the Beta distribution\nused to sample area parameters. As ``alpha`` grows, the two samples\nin each pair tend to be weighted more equally. As ``alpha``\napproaches 0 from above, the combination approaches only using\none element of the pair. Default: ``1``."
                                },
                                "interpolate_loss": {
                                    "type": "boolean",
                                    "description": "Interpolates the loss rather than the labels.\nA useful trick when using a cross entropy loss. Will produce incorrect behavior\nif the loss is not a linear function of the targets. Default: ``False``"
                                },
                                "uniform_sampling": {
                                    "type": "boolean",
                                    "description": "If ``True``, sample the bounding\nbox such that each pixel has an equal probability of being mixed.\nIf ``False``, defaults to the sampling used in the original\npaper implementation. Default: ``False``."
                                },
                                "input_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the input\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair.  The default is 0, which corresponds to any sequence, where the first element\nis the input. Default: ``0``."
                                },
                                "target_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the target\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair. The default is 1, which corresponds to any sequence, where the second element\nis the target. Default: ``1``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^cutout($|\\+)": {
                            "type": "object",
                            "properties": {
                                "num_holes": {
                                    "type": "integer",
                                    "description": "Integer number of holes to cut out.\nDefault: ``1``."
                                },
                                "length": {
                                    "type": "number",
                                    "description": "Relative side length of the masked region.\nIf specified, ``length`` is interpreted as a fraction of ``H`` and\n``W``, and the resulting box is a square with side length\n``length * min(H, W)``. Must be in the interval :math:`(0, 1)`.\nDefault: ``0.5``."
                                },
                                "uniform_sampling": {
                                    "type": "boolean",
                                    "description": "If ``True``, sample the bounding\nbox such that each pixel has an equal probability of being masked.\nIf ``False``, defaults to the sampling used in the original paper\nimplementation. Default: ``False``."
                                },
                                "input_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the input\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair.  The default is 0, which corresponds to any sequence, where the first element\nis the input. Default: ``0``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^ema($|\\+)": {
                            "type": "object",
                            "properties": {
                                "half_life": {
                                    "type": "string",
                                    "description": "The time string specifying the half life for terms in the average. A longer half life means\nold information is remembered longer, a shorter half life means old information is discared sooner.\nA half life of ``0`` means no averaging is done, an infinite half life means no update is done. Currently\nonly units of epoch ('ep') and batch ('ba'). Value must be an integer."
                                },
                                "update_interval": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "The time string specifying the period at which updates are done. For example,\nan ``update_interval='1ep'`` means updates are done every epoch, while ``update_interval='10ba'`` means\nupdates are done once every ten batches. Units must match the units used to specify ``half_life``. If not\nspecified, ``update_interval`` will default to ``1`` in the units of ``half_life``. Value must be an\ninteger. Default: ``None``."
                                },
                                "train_with_ema_weights": {
                                    "type": "boolean",
                                    "description": "An experimental feature that uses the ema weights as the training\nweights. In most cases should be left as ``False``. Default ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "half_life"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^factorize($|\\+)": {
                            "type": "object",
                            "properties": {
                                "factorize_convs": {
                                    "type": "boolean",
                                    "description": "whether to try factorizing :class:`torch.nn.Conv2d` modules.\nDefault: ``True``."
                                },
                                "factorize_linears": {
                                    "type": "boolean",
                                    "description": "whether to try factorizing :class:`torch.nn.Linear` modules.\nDefault: ``True``."
                                },
                                "min_channels": {
                                    "type": "integer",
                                    "description": "if a :class:`torch.nn.Conv2d` module does not have at least\nthis many input and output channels, it will be ignored. Modules with\nfew channels are unlikely to be accelerated by factorization due\nto poor hardware utilization. Default: ``256``."
                                },
                                "latent_channels": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "number of latent channels to use in factorized\nconvolutions. Can be specified as either an integer > 1 or as\na float within ``[0, 1)``. In the latter case, the value is\ninterpreted as a fraction of ``min(in_channels, out_channels)``\nfor each :class:`torch.nn.Conv2d` module, and is converted to\nthe equivalent integer value, with a minimum of 1. Default: ``0.25``."
                                },
                                "min_features": {
                                    "type": "integer",
                                    "description": "if a :class:`torch.nn.Linear` module does not have at least\nthis many input and output features, it will be ignored. Modules with\nfew features are unlikely to be accelerated by factorization due\nto poor hardware utilization. Default: ``256``."
                                },
                                "latent_features": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "size of the latent space for factorized linear modules.\nCan be specified as either an integer > 1 or as a float within ``[0, 0.5)``.\nIn the latter case, the value is interpreted as a fraction of\n``min(in_features, out_features)`` for each :class:`torch.nn.Linear`\nmodule and is converted to the equivalent integer value, with a\nminimum of 1. Default: ``128``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^fused_layernorm($|\\+)": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^gated_linear_units($|\\+)": {
                            "type": "object",
                            "properties": {
                                "act_fn": {
                                    "oneOf": [
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Optionally, the activation function to use. If ``None``, the algorithm will\nuse the existing activation function in the model."
                                },
                                "gated_layer_bias": {
                                    "type": "boolean",
                                    "description": "Whether to use biases in the linear layers within the GLU. Default: ``False``."
                                },
                                "non_gated_layer_bias": {
                                    "type": "boolean",
                                    "description": "Whether to use biases in the linear layers within the GLU. Default: ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^ghost_batchnorm($|\\+)": {
                            "type": "object",
                            "properties": {
                                "ghost_batch_size": {
                                    "type": "integer",
                                    "description": "size of sub-batches to normalize over. Default: ``32``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^label_smoothing($|\\+)": {
                            "type": "object",
                            "properties": {
                                "smoothing": {
                                    "type": "number",
                                    "description": "Strength of the label smoothing, in :math:`[0, 1]`.\n``smoothing=0`` means no label smoothing, and\n``smoothing=1`` means maximal smoothing (targets are ignored).\nDefault: ``0.1``."
                                },
                                "target_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the target\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair. The default is 1, which corresponds to any sequence, where the second element\nis the target. Default: ``1``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^layer_freezing($|\\+)": {
                            "type": "object",
                            "properties": {
                                "freeze_start": {
                                    "type": "number",
                                    "description": "The fraction of training to run before freezing begins. Default: ``0.5``."
                                },
                                "freeze_level": {
                                    "type": "number",
                                    "description": "The maximum fraction of layers to freeze. Default: ``1.0``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^squeeze_excite($|\\+)": {
                            "type": "object",
                            "properties": {
                                "latent_channels": {
                                    "type": "number",
                                    "description": "Dimensionality of the hidden layer within the added\nMLP. If less than 1, interpreted as a fraction of the number of\noutput channels in the :class:`torch.nn.Conv2d` immediately\npreceding each Squeeze-and-Excitation block. Default: ``64``."
                                },
                                "min_channels": {
                                    "type": "integer",
                                    "description": "An SE block is added after a :class:`torch.nn.Conv2d`\nmodule ``conv`` only if ``min(conv.in_channels, conv.out_channels) >= min_channels``.\nFor models that reduce spatial size and increase channel count\ndeeper in the network, this parameter can be used to only\nadd SE blocks deeper in the network. This may be desirable\nbecause SE blocks add less overhead when their inputs have\nsmaller spatial size. Default: ``128``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^swa($|\\+)": {
                            "type": "object",
                            "properties": {
                                "swa_start": {
                                    "type": "string",
                                    "description": "The time string denoting the amount of training\ncompleted before stochastic weight averaging begins. Currently only units of\nduration ('dur') and epoch ('ep') are supported. Default: ``'0.7dur'``."
                                },
                                "swa_end": {
                                    "type": "string",
                                    "description": "The time string denoting the amount of training\ncompleted before the baseline (non-averaged) model is replaced with the\nstochastic weight averaged model. It's important to have at least one epoch\nof training after the baseline model is replaced by the SWA model so that the\nSWA model can have its buffers (most importantly its batch norm statistics)\nupdated. If ``swa_end`` occurs during the final epoch of training (e.g.\n``swa_end = 0.9dur`` and ``max_duration = \"5ep\"``, or ``swa_end = 1.0dur``),\nthe SWA model will not have its buffers updated, which can negatively impact\naccuracy, so ensure ``swa_end`` < :math:`\\frac{N_{epochs}-1}{N_{epochs}}`.\nCurrently only units of duration ('dur') and epoch ('ep') are supported.\nDefault: ``'0.97dur'``."
                                },
                                "update_interval": {
                                    "type": "string",
                                    "description": "Time string denoting how often the averaged\nmodel is updated. For example, ``'1ep'`` means the averaged model will be\nupdated once per epoch and ``'5ba'`` means the averaged model will be updated\nevery 5 batches. Note that for single-epoch training runs (e.g. many NLP\ntraining runs), ``update_interval`` must be specified in units of ``'ba'``,\notherwise SWA won't happen. Also note that very small update intervals (e.g.\n``\"1ba\"``) can substantially slow down training. Default: ``'1ep'``."
                                },
                                "schedule_swa_lr": {
                                    "type": "boolean",
                                    "description": "Flag to determine whether to apply an\nSWA-specific LR schedule during the period in which SWA is active. Default:\n``False``."
                                },
                                "anneal_strategy": {
                                    "type": "string",
                                    "description": "SWA learning rate annealing schedule strategy.\n``\"linear\"`` for linear annealing, ``\"cos\"`` for cosine annealing. Default:\n``\"linear\"``."
                                },
                                "anneal_steps": {
                                    "type": "integer",
                                    "description": "Number of SWA model updates over which to\nanneal SWA learning rate. Note that updates are determined by the\n``update_interval`` argument. For example, if ``anneal_steps = 10`` and\n``update_interval = '1ep'``, then the SWA LR will be annealed once per epoch\nfor 10 epochs; if ``anneal_steps = 20`` and ``update_interval = '8ba'``, then\nthe SWA LR will be annealed once every 8 batches over the course of 160\nbatches (20 steps * 8 batches/step). Default: ``10``."
                                },
                                "swa_lr": {
                                    "oneOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "The final learning rate to anneal towards with the SWA\nLR scheduler. Set to ``None`` for no annealing. Default: ``None``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^no_op_model($|\\+)": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^mixup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "alpha": {
                                    "type": "number",
                                    "description": "the psuedocount for the Beta distribution used to sample\nmixing parameters. As ``alpha`` grows, the two samples\nin each pair tend to be weighted more equally. As ``alpha``\napproaches 0 from above, the combination approaches only using\none element of the pair. Default: ``0.2``."
                                },
                                "interpolate_loss": {
                                    "type": "boolean",
                                    "description": "Interpolates the loss rather than the labels.\nA useful trick when using a cross entropy loss. Will produce incorrect behavior\nif the loss is not a linear function of the targets. Default: ``False``"
                                },
                                "input_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the input\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair.  The default is 0, which corresponds to any sequence, where the first element\nis the input. Default: ``0``."
                                },
                                "target_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the target\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair. The default is 1, which corresponds to any sequence, where the second element\nis the target. Default: ``1``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^stochastic_depth($|\\+)": {
                            "type": "object",
                            "properties": {
                                "target_layer_name": {
                                    "type": "string",
                                    "description": "Block to replace with a stochastic block\nequivalent. The name must be registered in ``STOCHASTIC_LAYER_MAPPING``\ndictionary with the target layer class and the stochastic layer class.\nCurrently, only :class:`torchvision.models.resnet.Bottleneck` is supported."
                                },
                                "stochastic_method": {
                                    "type": "string",
                                    "description": "The version of stochastic depth to use.\n``\"block\"`` randomly drops blocks during training. ``\"sample\"`` randomly drops\nsamples within a block during training. Default: ``\"block\"``."
                                },
                                "drop_rate": {
                                    "type": "number",
                                    "description": "The base probability of dropping a layer or sample.\nMust be between 0.0 and 1.0. Default: ``0.2``."
                                },
                                "drop_distribution": {
                                    "type": "string",
                                    "description": "How ``drop_rate`` is distributed across\nlayers. Value must be one of ``\"uniform\"`` or ``\"linear\"``.\n``\"uniform\"`` assigns the same ``drop_rate`` across all layers.\n``\"linear\"`` linearly increases the drop rate across layer depth,\nstarting with 0 drop rate and ending with ``drop_rate``. Default: ``\"linear\"``."
                                },
                                "drop_warmup": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "description": "A :class:`Time` object,\ntime-string, or float on ``[0.0, 1.0]`` representing the fraction of the\ntraining duration to linearly increase the drop probability to\n`linear_drop_rate`. Default: ``0.0``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "target_layer_name"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^colout($|\\+)": {
                            "type": "object",
                            "properties": {
                                "p_row": {
                                    "type": "number",
                                    "description": "Fraction of rows to drop (drop along H). Default: ``0.15``."
                                },
                                "p_col": {
                                    "type": "number",
                                    "description": "Fraction of columns to drop (drop along W). Default: ``0.15``."
                                },
                                "batch": {
                                    "type": "boolean",
                                    "description": "Run ColOut at the batch level. Default: ``True``."
                                },
                                "resize_target": {
                                    "anyOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "description": "Whether to resize the target in addition to the input. If set to ``'auto'``, resizing\nthe target will be based on if the target has the same spatial dimensions as the input. Default: ``auto``."
                                },
                                "input_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the input\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair.  The default is 0, which corresponds to any sequence, where the first element\nis the input. Default: ``0``."
                                },
                                "target_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the target\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair. The default is 1, which corresponds to any sequence, where the second element\nis the target. Default: ``1``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^progressive_resizing($|\\+)": {
                            "type": "object",
                            "properties": {
                                "mode": {
                                    "type": "string",
                                    "description": "Type of scaling to perform. Value must be one of ``'crop'`` or ``'resize'``.\n``'crop'`` performs a random crop, whereas ``'resize'`` performs a bilinear\ninterpolation. Default: ``'resize'``."
                                },
                                "initial_scale": {
                                    "type": "number",
                                    "description": "Initial scale factor used to shrink the inputs. Must be a\nvalue in between 0 and 1. Default: ``0.5``."
                                },
                                "finetune_fraction": {
                                    "type": "number",
                                    "description": "Fraction of training to reserve for finetuning on the\nfull-sized inputs. Must be a value in between 0 and 1. Default: ``0.2``."
                                },
                                "delay_fraction": {
                                    "type": "number",
                                    "description": "Fraction of training before resizing ramp begins.\nMust be a value in between 0 and 1. Default: ``0.5``."
                                },
                                "size_increment": {
                                    "type": "integer",
                                    "description": "Align sizes to a multiple of this number. Default: ``4``."
                                },
                                "resize_targets": {
                                    "type": "boolean",
                                    "description": "If True, resize targets also. Default: ``False``."
                                },
                                "input_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the input\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair.  The default is 0, which corresponds to any sequence, where the first element\nis the input. Default: ``0``."
                                },
                                "target_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the target\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair. The default is 1, which corresponds to any sequence, where the second element\nis the target. Default: ``1``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^randaugment($|\\+)": {
                            "type": "object",
                            "properties": {
                                "severity": {
                                    "type": "integer",
                                    "description": "Severity of augmentation operators (between 1 to 10). M\nin the original paper. Default: ``9``."
                                },
                                "depth": {
                                    "type": "integer",
                                    "description": "Depth of augmentation chain. N in the original paper.\nDefault: ``2``."
                                },
                                "augmentation_set": {
                                    "type": "string",
                                    "description": "Must be one of the following options\nas also described in :attr:`.augmentation_primitives.augmentation_sets`:\n\n* ``\"all\"``\n    Uses all augmentations from the paper.\n* ``\"safe\"``\n    Like ``\"all\"``, but excludes transforms that are part of\n    the ImageNet-C/CIFAR10-C test sets\n* ``\"original\"``\n    Like ``\"all\"``, but some of the implementations\n    are identical to the original Github repository, which contains\n    implementation specificities for the augmentations\n    ``\"color\"``, ``\"contrast\"``, ``\"sharpness\"``, and ``\"brightness\"``. The\n    original implementations have an intensity sampling scheme that samples a\n    value bounded by 0.118 at a minimum, and a maximum value of\n    :math:`intensity \\times 0.18 + .1`, which ranges from 0.28 (intensity =\n    1) to 1.9 (intensity 10). These augmentations have different effects\n    depending on whether they are < 0 or > 0 (or < 1 or > 1).\n    ``\"all\"`` uses implementations of ``\"color\"``, ``\"contrast\"``,\n    ``\"sharpness\"``, and ``\"brightness\"`` that account for diverging effects\n    around 0 (or 1).\n\nDefault: ``\"all\"``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^augmix($|\\+)": {
                            "type": "object",
                            "properties": {
                                "severity": {
                                    "type": "integer",
                                    "description": "Severity of augmentations; ranges from 0\n(no augmentation) to 10 (most severe). Default: ``3``."
                                },
                                "depth": {
                                    "type": "integer",
                                    "description": "Number of augmentations per sequence. -1 enables stochastic\ndepth sampled uniformly from ``[1, 3]``. Default: ``-1``."
                                },
                                "width": {
                                    "type": "integer",
                                    "description": "Number of augmentation sequences. Default: ``3``."
                                },
                                "alpha": {
                                    "type": "number",
                                    "description": "Pseudocount for Beta and Dirichlet distributions. Must be\n> 0.  Higher values yield mixing coefficients closer to uniform weighting. As\nthe value approaches 0, the mixing coefficients approach using only one\nversion of each image. Default: ``1.0``."
                                },
                                "augmentation_set": {
                                    "type": "string",
                                    "description": "Must be one of the following options as also described\nin :attr:`~composer.algorithms.utils.augmentation_primitives.augmentation_sets`:\n\n* ``\"all\"``\n    Uses all augmentations from the paper.\n* ``\"safe\"``\n    Like ``\"all\"``, but excludes transforms that are part of\n    the ImageNet-C/CIFAR10-C test sets.\n* ``\"original\"``\n    Like ``\"all\"``, but some of the implementations\n    are identical to the original Github repository, which contains\n    implementation specificities for the augmentations\n    ``\"color\"``, ``\"contrast\"``, ``\"sharpness\"``, and ``\"brightness\"``. The\n    original implementations have an intensity sampling scheme that samples a\n    value bounded by 0.118 at a minimum, and a maximum value of\n    :math:`intensity \\times 0.18 + .1`, which ranges from 0.28 (intensity = 1)\n    to 1.9 (intensity 10). These augmentations have different effects\n    depending on whether they are < 0 or > 0 (or < 1 or > 1).\n    ``\"all\"`` uses implementations of ``\"color\"``, ``\"contrast\"``,\n    ``\"sharpness\"``, and ``\"brightness\"`` that account for diverging effects around 0\n    (or 1).\n\nDefault: ``\"all\"``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^sam($|\\+)": {
                            "type": "object",
                            "properties": {
                                "rho": {
                                    "type": "number",
                                    "description": "The neighborhood size parameter of SAM. Must be greater than 0.\nDefault: ``0.05``."
                                },
                                "epsilon": {
                                    "type": "number",
                                    "description": "A small value added to the gradient norm for numerical stability.\nDefault: ``1e-12``."
                                },
                                "interval": {
                                    "type": "integer",
                                    "description": "SAM will run once per ``interval`` steps. A value of 1 will\ncause SAM to run every step. Steps on which SAM runs take\nroughly twice as much time to complete. Default: ``1``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^alibi($|\\+)": {
                            "type": "object",
                            "properties": {
                                "position_embedding_attribute": {
                                    "type": "string",
                                    "description": "Attribute for position\nembeddings. For example in HuggingFace's GPT2, the\nposition embeddings are ``'transformer.wpe'``."
                                },
                                "attention_module_name": {
                                    "type": "string",
                                    "description": "Module/class that will have its\nself-attention function replaced. For example, in\nHuggingFace's GPT, the self-attention module is\n``'transformers.models.gpt2.modeling_gpt2.GPT2Attention'``."
                                },
                                "attr_to_replace": {
                                    "type": "string",
                                    "description": "Attribute that self-attention function will\nreplace. For example, in HuggingFace's GPT2, the\nself-attention function is ``'_attn'``."
                                },
                                "alibi_attention": {
                                    "type": "string",
                                    "description": "Path to new self-attention function in which\nALiBi is implemented. Used to replace\n``{attention_module}.{attr_to_replace}``. Example:\n``'composer.algorithms.alibi._gpt2_alibi._attn'``."
                                },
                                "mask_replacement_function": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Path to function to replace model's\nattention mask. This can be necessary if evaluating\non sequence lengths longer than the model was initialized to\naccommodate. Takes positional arguments ``module`` and\n``max_sequence_length``. For example,\n``'composer.algorithms.alibi._gpt2_alibi.enlarge_mask'``. Default = ``None``,\nwhich means no modification of the model's default attention mask."
                                },
                                "heads_per_layer": {
                                    "oneOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Number of attention heads per layer."
                                },
                                "max_sequence_length": {
                                    "type": "integer",
                                    "description": "Maximum sequence length that the\nmodel will be able to accept. This is sometimes necessary for evaluating\non sequence lengths longer than the model was initialized to\naccommodate. Default: ``8192``."
                                },
                                "train_sequence_length_scaling": {
                                    "type": "number",
                                    "description": "Amount by which to scale\ntraining sequence length. One batch of training data will be\nreshaped from shape :math:`(sequence\\_length, batch)` to\n:math:`(sequence\\_length \\times train\\_sequence\\_length\\_scaling,\n\\frac{batch}{train\\_sequence\\_length\\_scaling})`. Default: ``0.25``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "position_embedding_attribute",
                                "attention_module_name",
                                "attr_to_replace",
                                "alibi_attention"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^selective_backprop($|\\+)": {
                            "type": "object",
                            "properties": {
                                "start": {
                                    "type": "number",
                                    "description": "SB interval start as fraction of training duration.\nDefault: ``0.5``."
                                },
                                "end": {
                                    "type": "number",
                                    "description": "SB interval end as fraction of training duration.\nDefault: ``0.9``."
                                },
                                "keep": {
                                    "type": "number",
                                    "description": "fraction of minibatch to select and keep for gradient computation.\nDefault: ``0.5``."
                                },
                                "scale_factor": {
                                    "type": "number",
                                    "description": "scale for downsampling input for selection forward pass.\nDefault: ``1.``."
                                },
                                "interrupt": {
                                    "type": "integer",
                                    "description": "interrupt SB with a vanilla minibatch step every\n``interrupt`` batches. Default: ``2``."
                                },
                                "input_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the input\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair.  The default is 0, which corresponds to any sequence, where the first element\nis the input. Default: ``0``."
                                },
                                "target_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the target\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair. The default is 1, which corresponds to any sequence, where the second element\nis the target. Default: ``1``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^gradient_clipping($|\\+)": {
                            "type": "object",
                            "properties": {
                                "clipping_type": {
                                    "type": "string",
                                    "description": "String denoting which type of\ngradient clipping to do. The options are: 'norm', which clips the gradient norm\nand uses `torch.nn.utils.clip_grad_norm_`, 'value', which clips gradient at\na specified value and uses `torch.nn.utils.clip_grad_value_`, and 'adaptive',\nwhich clips all gradients based on gradient norm:parameter norm ratio using\ncomposer.algorithms.gradient_clipping.gradient_clipping._apply_agc."
                                },
                                "clipping_threshold": {
                                    "type": "number",
                                    "description": "Specifies what value to clip the gradients\nto (for 'value'), what values to clip the gradient norms to (for 'norm'), and\nthreshold by which if grad_norm / weight_norm is greater than this threshold then\nscale gradients by this threshold * (weight_norm / grad_norm) (for 'adaptive')."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "clipping_type",
                                "clipping_threshold"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                }
            ]
        },
        "14_list": {
            "type": "number"
        },
        "15_list": {
            "type": "number"
        },
        "16_list": {
            "type": "number"
        },
        "17_list": {
            "type": "number"
        },
        "18_list": {
            "type": "string"
        },
        "19_list": {
            "type": "string"
        },
        "20_list": {
            "anyOf": [
                {
                    "type": "object",
                    "patternProperties": {
                        "^step($|\\+)": {
                            "type": "object",
                            "properties": {
                                "step_size": {
                                    "type": "string",
                                    "description": "Time between changes to the learning rate."
                                },
                                "gamma": {
                                    "type": "number",
                                    "description": "Multiplicative decay factor. Default = ``0.1``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "step_size"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^multistep($|\\+)": {
                            "type": "object",
                            "properties": {
                                "milestones": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/18_list"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/$defs/18_list"
                                            }
                                        }
                                    ],
                                    "description": "Times at which the learning rate should change."
                                },
                                "gamma": {
                                    "type": "number",
                                    "description": "Multiplicative decay factor. Default = ``0.1``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "milestones"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^exponential($|\\+)": {
                            "type": "object",
                            "properties": {
                                "gamma": {
                                    "type": "number",
                                    "description": "Multiplicative decay factor."
                                },
                                "decay_period": {
                                    "type": "string",
                                    "description": "Decay period. Default = ``\"1ep\"``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "gamma"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^linear_decay($|\\+)": {
                            "type": "object",
                            "properties": {
                                "alpha_i": {
                                    "type": "number",
                                    "description": "Initial learning rate multiplier. Default = ``1.0``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Final learning rate multiplier. Default = ``0.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^cosine_decay($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^cosine_warmrestart($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_0": {
                                    "type": "string",
                                    "description": "The period of the first cycle."
                                },
                                "t_mult": {
                                    "type": "number",
                                    "description": "The multiplier for the duration of successive cycles. Default = ``1.0``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_0"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^constant($|\\+)": {
                            "type": "object",
                            "properties": {
                                "alpha": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to maintain while this scheduler is active. Default = ``1.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "Duration of this scheduler. Default = ``\"1dur\"``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^polynomial($|\\+)": {
                            "type": "object",
                            "properties": {
                                "power": {
                                    "type": "number",
                                    "description": "The exponent to be used for the proportionality relationship."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "power"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^polynomial_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "power": {
                                    "type": "number",
                                    "description": "The exponent to be used for the proportionality relationship. Default = ``2.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^multistep_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "milestones": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/19_list"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/$defs/19_list"
                                            }
                                        }
                                    ],
                                    "description": "Times at which the learning rate should change."
                                },
                                "gamma": {
                                    "type": "number",
                                    "description": "Multiplicative decay factor. Default = ``0.1``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup",
                                "milestones"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^constant_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "alpha": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to maintain while this scheduler is active. Default = ``1.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "Duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^linear_decay_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "alpha_i": {
                                    "type": "number",
                                    "description": "Initial learning rate multiplier. Default = ``1.0``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Final learning rate multiplier. Default = ``0.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^cosine_decay_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                }
            ]
        },
        "21_list": {
            "type": "string"
        },
        "22_list": {
            "type": "string"
        },
        "23_list": {
            "type": "string"
        },
        "24_list": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name of the Evaluator."
                },
                "eval_dataset": {
                    "anyOf": [
                        {
                            "type": "object",
                            "patternProperties": {
                                "^ade20k($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val', 'test']"
                                        },
                                        "base_size": {
                                            "type": "integer",
                                            "description": "Initial size of the image and target before other augmentations"
                                        },
                                        "min_resize_scale": {
                                            "type": "number",
                                            "description": "Minimum value that the image and target can be scaled"
                                        },
                                        "max_resize_scale": {
                                            "type": "number",
                                            "description": "Maximum value that the image and target can be scaled"
                                        },
                                        "final_size": {
                                            "type": "integer",
                                            "description": "Final size of the image and target"
                                        },
                                        "ignore_background": {
                                            "type": "boolean",
                                            "description": "If true, ignore the background class in training loss"
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_ade20k($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        },
                                        "base_size": {
                                            "type": "integer",
                                            "description": "Initial size of the image and target before other augmentations"
                                        },
                                        "min_resize_scale": {
                                            "type": "number",
                                            "description": "Minimum value that the image and target can be scaled"
                                        },
                                        "max_resize_scale": {
                                            "type": "number",
                                            "description": "Maximum value that the image and target can be scaled"
                                        },
                                        "final_size": {
                                            "type": "integer",
                                            "description": "Final size of the image and target"
                                        },
                                        "ignore_background": {
                                            "type": "boolean",
                                            "description": "If true, ignore the background class in training loss"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^brats($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "oversampling": {
                                            "type": "number",
                                            "description": "oversampling"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^imagenet($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "resize_size": {
                                            "type": "integer",
                                            "description": "resize size. Set to -1 to not resize"
                                        },
                                        "crop_size": {
                                            "type": "integer",
                                            "description": "crop size"
                                        },
                                        "use_ffcv": {
                                            "type": "boolean",
                                            "description": "whether to use ffcv for faster dataloading"
                                        },
                                        "ffcv_cpu_only": {
                                            "type": "boolean",
                                            "description": "Use cpu for all transformations."
                                        },
                                        "ffcv_dir": {
                                            "type": "string",
                                            "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                        },
                                        "ffcv_dest": {
                                            "type": "string",
                                            "description": "<file>.ffcv file that has dataset samples"
                                        },
                                        "ffcv_write_dataset": {
                                            "type": "boolean",
                                            "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_imagenet1k($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        },
                                        "resize_size": {
                                            "type": "integer",
                                            "description": "Resize size. Set to -1 to not resize"
                                        },
                                        "crop_size": {
                                            "type": "integer",
                                            "description": "Crop size"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^cifar10($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "download": {
                                            "type": "boolean",
                                            "description": "whether to download the dataset, if needed"
                                        },
                                        "use_ffcv": {
                                            "type": "boolean",
                                            "description": "whether to use ffcv for faster dataloading"
                                        },
                                        "ffcv_dir": {
                                            "type": "string",
                                            "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                        },
                                        "ffcv_dest": {
                                            "type": "string",
                                            "description": "<file>.ffcv file that has dataset samples"
                                        },
                                        "ffcv_write_dataset": {
                                            "type": "boolean",
                                            "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_cifar10($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^mnist($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "download": {
                                            "type": "boolean",
                                            "description": "whether to download the dataset, if needed"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^lm($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/22_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/22_list"
                                                    }
                                                }
                                            ],
                                            "description": "Path to the Huggingface Datasets directory."
                                        },
                                        "split": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to use 'train', 'validation' or 'test' split."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The name of the tokenizer to preprocess text with."
                                        },
                                        "use_masked_lm": {
                                            "type": "boolean",
                                            "description": "Whether the dataset should be encoded with masked language modeling or not."
                                        },
                                        "num_tokens": {
                                            "type": "integer",
                                            "description": "If desired, the number of tokens to truncate the dataset to."
                                        },
                                        "mlm_probability": {
                                            "type": "number",
                                            "description": "If using masked language modeling, the probability to mask tokens with."
                                        },
                                        "seed": {
                                            "type": "integer",
                                            "description": "Which seed to use to generate train and validation splits."
                                        },
                                        "subsample_ratio": {
                                            "type": "number",
                                            "description": "If desired, the percentage of the dataset to use."
                                        },
                                        "max_seq_length": {
                                            "type": "integer",
                                            "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^glue($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "task": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The GLUE task to train on, choose one from: CoLA, MNLI, MRPC, QNLI, QQP, RTE, SST-2, and STS-B."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                        },
                                        "split": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to use 'train', 'validation' or 'test' split."
                                        },
                                        "max_seq_length": {
                                            "type": "integer",
                                            "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                        },
                                        "max_network_retries": {
                                            "type": "integer",
                                            "description": "Optionally, the number of times to retry HTTP requests if they fail."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^coco($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_coco($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^c4($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "Whether to drop the last samples for the last batch."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the samples in the dataset. Currently, shards are assigned and consumed with deterministic per-device shard order, but shuffling affects the order of samples via (per-device) shuffle buffers."
                                        },
                                        "split": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "What split of the dataset to use. Either `train` or `validation`."
                                        },
                                        "num_samples": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of post-processed token samples, used to set epoch size of the IterableDataset."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                        },
                                        "max_seq_len": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The max sequence length of each token sample."
                                        },
                                        "group_method": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "How to group text samples into token samples. Either `truncate` or `concat`."
                                        },
                                        "mlm": {
                                            "type": "boolean",
                                            "description": "Whether or not to use masked language modeling."
                                        },
                                        "mlm_probability": {
                                            "type": "number",
                                            "description": "If `mlm==True`, the probability that tokens are masked."
                                        },
                                        "shuffle_buffer_size": {
                                            "type": "integer",
                                            "description": "If `shuffle=True`, samples are read into a buffer of this size (per-device), and randomly sampled from there to produce shuffled samples."
                                        },
                                        "seed": {
                                            "type": "integer",
                                            "description": "If `shuffle=True`, what seed to use for shuffling operations."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_c4($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "What split of the dataset to use. Either `train` or `val`."
                                        },
                                        "tokenizer_name": {
                                            "type": "string",
                                            "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                        },
                                        "max_seq_len": {
                                            "type": "integer",
                                            "description": "The max sequence length of each token sample."
                                        },
                                        "group_method": {
                                            "type": "string",
                                            "description": "How to group text samples into token samples. Currently only `truncate` is supported."
                                        },
                                        "mlm": {
                                            "type": "boolean",
                                            "description": "Whether or not to use masked language modeling."
                                        },
                                        "mlm_probability": {
                                            "type": "number",
                                            "description": "If `mlm==True`, the probability that tokens are masked."
                                        },
                                        "max_retries": {
                                            "type": "integer",
                                            "description": "Number of download re-attempts before giving up."
                                        },
                                        "timeout": {
                                            "type": "number",
                                            "description": "How long to wait for shard to download before raising an exception."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ],
                    "description": "Evaluator dataset for the Evaluator"
                },
                "eval_interval": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "An integer,\nwhich will be interpreted to be epochs, a str (e.g. ``1ep``, or ``10ba``), a :class:`.Time` object, or a callable.\nDefaults to ``None``, which means that the ``eval_interval`` parameter from the :class:`.Trainer` will be used.\n\nIf an integer (in epochs), :class:`.Time` string, or :class:`.Time` instance, the evaluator will be run\nwith this frequency. :class:`.Time` strings or :class:`.Time` instances must have units of\n:attr:`.TimeUnit.BATCH` or :attr:`.TimeUnit.EPOCH`.\n\nSet to ``0`` to disable evaluation.\n\nIf a callable, it should take two arguments (:class:`.State`, :class:`.Event`) and return a bool\nrepresenting whether the evaluator should be invoked. The event will be either :attr:`.Event.BATCH_END`\nor :attr:`.Event.EPOCH_END`.\n\nWhen specifying ``eval_interval``, the evaluator(s) are also run at the ``Event.FIT_END`` if it doesn't\nevenly divide the training duration."
                },
                "subset_num_batches": {
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The maximum number of batches to use for each evaluation. Defaults to ``None``,\nwhich means that the ``eval_subset_num_batches`` parameter from the :class:`.Trainer` will be used.\nSet to ``-1`` to evaluate the entire ``dataloader``"
                },
                "metric_names": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/23_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/23_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Name of the metrics for the evaluator. Can be a torchmetrics metric name or the\n        class name of a metric returned by model.metrics(). If None (the default), uses all metrics in the model"
                }
            },
            "additionalProperties": false,
            "required": [
                "label",
                "eval_dataset"
            ]
        },
        "25_list": {
            "anyOf": [
                {
                    "type": "object",
                    "patternProperties": {
                        "^checkpoint_saver($|\\+)": {
                            "type": "object",
                            "properties": {
                                "folder": {
                                    "type": "string",
                                    "description": "Format string for the folder where checkpoints will be saved.\nDefault: ``'{run_name}/checkpoints'``.\n\nThe following format variables are available:\n\n\n+------------------------+-------------------------------------------------------+\n| Variable               | Description                                           |\n+========================+=======================================================+\n| ``{run_name}``         | The name of the training run. See                     |\n|                        | :attr:`~composer.loggers.logger.Logger.run_name`.     |\n+------------------------+-------------------------------------------------------+\n| ``{rank}``             | The global rank, as returned by                       |\n|                        | :func:`~composer.utils.dist.get_global_rank`.         |\n+------------------------+-------------------------------------------------------+\n| ``{local_rank}``       | The local rank of the process, as returned by         |\n|                        | :func:`~composer.utils.dist.get_local_rank`.          |\n+------------------------+-------------------------------------------------------+\n| ``{world_size}``       | The world size, as returned by                        |\n|                        | :func:`~composer.utils.dist.get_world_size`.          |\n+------------------------+-------------------------------------------------------+\n| ``{local_world_size}`` | The local world size, as returned by                  |\n|                        | :func:`~composer.utils.dist.get_local_world_size`.    |\n+------------------------+-------------------------------------------------------+\n| ``{node_rank}``        | The node rank, as returned by                         |\n|                        | :func:`~composer.utils.dist.get_node_rank`.           |\n+------------------------+-------------------------------------------------------+\n\n\n.. note::\n\n    When training with multiple devices (i.e. GPUs), ensure that ``'{rank}'`` appears in the format.\n    Otherwise, multiple processes may attempt to write to the same file."
                                },
                                "filename": {
                                    "type": "string",
                                    "description": "A format string describing how to name checkpoints.\nDefault: ``'ep{epoch}-ba{batch}-rank{rank}'``.\n\nCheckpoints will be saved approximately to ``{folder}/{filename.format(...)}``.\n\nThe following format variables are available:\n\n\n+----------------------------+------------------------------------------------------------+\n| Variable                   | Description                                                |\n+============================+============================================================+\n| ``{run_name}``             | The name of the training run. See                          |\n|                            | :attr:`~composer.loggers.logger.Logger.run_name`.          |\n+----------------------------+------------------------------------------------------------+\n| ``{rank}``                 | The global rank, as returned by                            |\n|                            | :func:`~composer.utils.dist.get_global_rank`.              |\n+----------------------------+------------------------------------------------------------+\n| ``{local_rank}``           | The local rank of the process, as returned by              |\n|                            | :func:`~composer.utils.dist.get_local_rank`.               |\n+----------------------------+------------------------------------------------------------+\n| ``{world_size}``           | The world size, as returned by                             |\n|                            | :func:`~composer.utils.dist.get_world_size`.               |\n+----------------------------+------------------------------------------------------------+\n| ``{local_world_size}``     | The local world size, as returned by                       |\n|                            | :func:`~composer.utils.dist.get_local_world_size`.         |\n+----------------------------+------------------------------------------------------------+\n| ``{node_rank}``            | The node rank, as returned by                              |\n|                            | :func:`~composer.utils.dist.get_node_rank`.                |\n+----------------------------+------------------------------------------------------------+\n| ``{epoch}``                | The total epoch count, as returned by                      |\n|                            | :meth:`~composer.core.time.Timestamp.epoch`.               |\n+----------------------------+------------------------------------------------------------+\n| ``{batch}``                | The total batch count, as returned by                      |\n|                            | :meth:`~composer.core.time.Timestamp.batch`.               |\n+----------------------------+------------------------------------------------------------+\n| ``{batch_in_epoch}``       | The batch count in the current epoch, as returned by       |\n|                            | :meth:`~composer.core.time.Timestamp.batch_in_epoch`.      |\n+----------------------------+------------------------------------------------------------+\n| ``{sample}``               | The total sample count, as returned by                     |\n|                            | :meth:`~composer.core.time.Timestamp.sample`.              |\n+----------------------------+------------------------------------------------------------+\n| ``{sample_in_epoch}``      | The sample count in the current epoch, as returned by      |\n|                            | :meth:`~composer.core.time.Timestamp.sample_in_epoch`.     |\n+----------------------------+------------------------------------------------------------+\n| ``{token}``                | The total token count, as returned by                      |\n|                            | :meth:`~composer.core.time.Timestamp.token`.               |\n+----------------------------+------------------------------------------------------------+\n| ``{token_in_epoch}``       | The token count in the current epoch, as returned by       |\n|                            | :meth:`~composer.core.time.Timestamp.token_in_epoch`.      |\n+----------------------------+------------------------------------------------------------+\n| ``{total_wct}``            | The total training duration in seconds, as returned by     |\n|                            | :meth:`~composer.core.time.Timestamp.total_wct`.           |\n+----------------------------+------------------------------------------------------------+\n| ``{epoch_wct}``            | The epoch duration in seconds, as returned by              |\n|                            | :meth:`~composer.core.time.Timestamp.epoch_wct`.           |\n+----------------------------+------------------------------------------------------------+\n| ``{batch_wct}``            | The batch duration in seconds, as returned by              |\n|                            | :meth:`~composer.core.time.Timestamp.batch_wct`.           |\n+----------------------------+------------------------------------------------------------+\n\n\n\n.. note::\n\n    *   By default, only the rank zero process will save a checkpoint file.\n\n    *   When using DeepSpeed, each rank will save a checkpoint file in tarball format. DeepSpeed\n        requires tarball format, as it saves model and optimizer states in separate files.\n        Ensure that ``'{rank}'`` appears within the ``filename``. Otherwise, multiple ranks\n        may attempt to write to the same file(s), leading to corrupted checkpoints. If no tarball file\n        extension is specified, ``'.tar'`` will be used.\n\n    *   To use compression (regardless of whether DeepSpeed is enabled), set the file extension\n        to ``'.tar.gz'``, ``'.tgz'``, ``'.tar.bzip'``, or ``'.tar.lzma'`` (depending on the desired\n        compression algorithm).\n\n.. warning::\n\n    Using compression will block the training loop while checkpoints are being compressed. As such, we\n    recommend saving checkpoints without compression.\n\nConsider the following scenario where:\n\n*   The :attr:`~.State.run_name` is ``'awesome-training-run'``\n*   The default ``folder='{run_name}/checkpoints'`` is used.\n*   The default ``name='ep{epoch}-ba{batch}-rank{rank}'`` is used.\n*   The current epoch count is ``1``.\n*   The current batch count is ``42``.\n\nWhen DeepSpeed is not being used, the rank zero process will save the checkpoint to\n``\"awesome-training-run/checkpoints/ep1-ba42-rank0\"``.\n\nWhen DeepSpeed is being used, each rank (process) will save checkpoints to::\n\n    awesome-training-run/checkpoints/ep1-ba42-rank0.tar\n    awesome-training-run/checkpoints/ep1-ba42-rank1.tar\n    awesome-training-run/checkpoints/ep1-ba42-rank2.tar\n    ..."
                                },
                                "artifact_name": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Format string for the checkpoint's artifact name.\nDefault: ``\"{run_name}/checkpoints/ep{epoch}-ba{batch}-rank{rank}\"``.\n\nAfter the checkpoint is saved, it will be periodically logged as a file artifact.\nThe artifact name will be determined by this format string.\n\n.. seealso:: :meth:`.Logger.log_file_artifact` for file artifact logging.\n\nThe same format variables for ``filename`` are available.\n\nLeading slashes (``'/'``) will be stripped.\n\nTo disable logging trace files as file artifacts, set this parameter to ``None``."
                                },
                                "latest_filename": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "A format string for a symlink which points to the last saved checkpoint.\nDefault: ``'latest-rank{rank}'``.\n\nSymlinks will be created approximately at ``{folder}/{latest_filename.format(...)}``.\n\nThe same format variables as for ``name`` are available.\n\nTo disable symlinks, set this parameter to ``None``.\n\nConsider the following scenario, where:\n\n*   The :attr:`~.State.run_name` is 'awesome-training-run'\n*   The default ``folder='{run_name}/checkpoints'`` is used.\n*   The default ``name='ep{epoch}-ba{batch}-rank{rank}'`` is used.\n*   The default ``latest_filename='latest-rank{rank}'`` is used.\n*   The current epoch count is ``1``.\n*   The current batch count is ``42``.\n\nWhen DeepSpeed is not being used, the rank zero process will save the checkpoint to\n``'awesome-training-run/checkpoints/ep1-ba42-rank0'``,\nand a symlink will be created at\n``'awesome-training-run/checkpoints/latest-rank0' -> 'awesome-training-run/checkpoints/ep1-ba42-rank0'``\n\nWhen DeepSpeed is being used, each rank (process) will save checkpoints to::\n\n    awesome-training-run/checkpoints/ep1-ba42-rank0.tar\n    awesome-training-run/checkpoints/ep1-ba42-rank1.tar\n    awesome-training-run/checkpoints/ep1-ba42-rank2.tar\n    ...\n\nCorresponding symlinks will be created at::\n\n    awesome-training-run/checkpoints/latest-rank0.tar -> awesome-training-run/checkpoints/ep1-ba42-rank0.tar\n    awesome-training-run/checkpoints/latest-rank1.tar -> awesome-training-run/checkpoints/ep1-ba42-rank1.tar\n    awesome-training-run/checkpoints/latest-rank2.tar -> awesome-training-run/checkpoints/ep1-ba42-rank2.tar\n    ..."
                                },
                                "latest_artifact_name": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Format string for the checkpoint's latest symlink artifact name.\nDefault: ``'{run_name}/checkpoints/latest-rank{rank}\"``.\n\nWhenever a new checkpoint is saved, a symlink artifact is created or updated to point to the latest checkpoint's ``artifact_name``.\nThe artifact name will be determined by this format string. This parameter has no effect if ``latest_filename`` or ``artifact_name`` is ``None``.\n\n.. seealso:: :func:`.write_symlink` for symlink artifact logging.\n\nThe same format variables for ``filename`` are available.\n\nLeading slashes (``'/'``) will be stripped.\n\nTo disable symlinks in logger, set this parameter to ``None``."
                                },
                                "save_interval": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        }
                                    ],
                                    "description": "A :class:`.Time`, time-string, integer (in epochs),\nor a function that takes (state, event) and returns a boolean whether a checkpoint should be saved.\n\nIf an integer, checkpoints will be saved every n epochs.\nIf :class:`.Time` or a time-string, checkpoints will be saved according to this interval.\n\n.. seealso:: :func:`.checkpoint_periodically`\n\nIf a function, then this function should take two arguments (:class:`.State`, :class:`.Event`).\nThe first argument will be the current state of the trainer, and the second argument will be\nbe :attr:`.Event.BATCH_CHECKPOINT` or :attr:`.Event.EPOCH_CHECKPOINT` (depending on the current training\nprogress). It should return ``True`` if a checkpoint should be saved given the current state and\nevent."
                                },
                                "overwrite": {
                                    "type": "boolean",
                                    "description": "Whether existing checkpoints should be overridden.\nIf ``False`` (the default), then the ``folder`` must not exist or must not contain checkpoints which may conflict\nwith the current run. Default: ``False``."
                                },
                                "num_checkpoints_to_keep": {
                                    "type": "integer",
                                    "description": "The number of checkpoints to keep locally. The oldest checkpoints\nare removed first. Set to ``-1`` to keep all checkpoints locally. Default: ``-1``.\n\nCheckpoints will be removed after they have been logged as a file artifact. For example, when this callback\nis used in conjunction with the :class:`.ObjectStoreLogger`, set this\nparameter to ``0`` to immediately delete checkpoints from the local disk after they have been uploaded to\nthe object store.\n\nThis parameter only controls how many checkpoints are kept locally; checkpoints are not deleted from\nartifact stores."
                                },
                                "weights_only": {
                                    "type": "boolean",
                                    "description": "If ``True``, save only the model weights instead of the entire training state.\nThis parmeter must be ``False`` when using DeepSpeed. Default: ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^speed_monitor($|\\+)": {
                            "type": "object",
                            "properties": {
                                "window_size": {
                                    "type": "integer",
                                    "description": "Number of batches to use for a rolling average of throughput.\nDefaults to 100."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^lr_monitor($|\\+)": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^grad_monitor($|\\+)": {
                            "type": "object",
                            "properties": {
                                "log_layer_grad_norms": {
                                    "type": "boolean",
                                    "description": "Whether to log the L2 normalization of each layer.\nDefault: ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^memory_monitor($|\\+)": {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^mlperf($|\\+)": {
                            "type": "object",
                            "properties": {
                                "root_folder": {
                                    "type": "string",
                                    "description": "The root submission folder"
                                },
                                "index": {
                                    "type": "integer",
                                    "description": "The repetition index of this run. The filename created will be\n``result_[index].txt``."
                                },
                                "benchmark": {
                                    "type": "string",
                                    "description": "Benchmark name. Currently only ``resnet`` supported.\nDefault: ``'resnet'``."
                                },
                                "target": {
                                    "type": "number",
                                    "description": "The target metric before the mllogger marks the stop\nof the timing run. Default: ``0.759`` (resnet benchmark)."
                                },
                                "division": {
                                    "type": "string",
                                    "description": "Division of submission. Currently only ``open`` division supported.\nDefault: ``'open'``."
                                },
                                "metric_name": {
                                    "type": "string",
                                    "description": "name of the metric to compare against the target.\nDefault: ``Accuracy``."
                                },
                                "metric_label": {
                                    "type": "string",
                                    "description": "The label name. The metric will be accessed via\n``state.current_metrics[metric_label][metric_name]``."
                                },
                                "submitter": {
                                    "type": "string",
                                    "description": "Submitting organization. Default: ``\"MosaicML\"``."
                                },
                                "system_name": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Name of the system (e.g. 8xA100_composer). If\nnot provided, system name will default to ``[world_size]x[device_name]_composer``,\ne.g. ``8xNVIDIA_A100_80GB_composer``."
                                },
                                "status": {
                                    "type": "string",
                                    "description": "Submission status. One of (onprem, cloud, or preview).\nDefault: ``\"onprem\"``."
                                },
                                "cache_clear_cmd": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Command to invoke during the cache clear. This callback\nwill call ``os.system(cache_clear_cmd)``. Default is disabled (None)"
                                },
                                "host_processors_per_node": {
                                    "oneOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Total number of host processors per node.  Default: ``None``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "root_folder",
                                "index"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^early_stopper($|\\+)": {
                            "type": "object",
                            "properties": {
                                "monitor": {
                                    "type": "string",
                                    "description": "The name of the metric to monitor."
                                },
                                "dataloader_label": {
                                    "type": "string",
                                    "description": "The label of the dataloader or evaluator associated with the tracked metric.\nIf ``monitor`` is in an :class:`.Evaluator`, the ``dataloader_label`` field should be set to the label of the\n:class:`.Evaluator`.\n\nIf monitor is a training metric or an ordinary evaluation metric not in an :class:`.Evaluator`,\nthe ``dataloader_label`` should be set to the dataloader label, which defaults to ``'train'`` or\n``'eval'``, respectively."
                                },
                                "comp": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "A comparison operator to measure change of the monitored metric.\nThe comparison operator will be called ``comp(current_value, prev_best)``. For metrics where the optimal value is low\n(error, loss, perplexity), use a less than operator, and for metrics like accuracy where the optimal value\nis higher, use a greater than operator. Defaults to :func:`torch.less` if loss, error, or perplexity are substrings\nof the monitored metric, otherwise defaults to :func:`torch.greater`."
                                },
                                "min_delta": {
                                    "type": "number",
                                    "description": "An optional float that requires a new value to exceed the best value by at least that amount.\nDefault: ``0.0``."
                                },
                                "patience": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "description": "The interval of time the monitored metric can not improve without stopping\ntraining. Default: 1 epoch. If patience is an integer, it is interpreted as the number of epochs."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "monitor",
                                "dataloader_label"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^threshold_stopper($|\\+)": {
                            "type": "object",
                            "properties": {
                                "monitor": {
                                    "type": "string",
                                    "description": "The name of the metric to monitor."
                                },
                                "dataloader_label": {
                                    "type": "string",
                                    "description": "The label of the dataloader or evaluator associated with the tracked metric. If\nmonitor is in an Evaluator, the dataloader_label field should be set to the Evaluator's label. If\nmonitor is a training metric or an ordinary evaluation metric not in an Evaluator, dataloader_label\nshould be set to 'train' or 'eval' respectively. If dataloader_label is set to 'train', then the\ncallback will stop training in the middle of the epoch."
                                },
                                "threshold": {
                                    "type": "number",
                                    "description": "The threshold that dictates when to halt training. Whether training stops if the metric\nexceeds or falls below the threshold depends on the comparison operator."
                                },
                                "comp": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "A comparison operator to measure change of the monitored metric. The comparison\noperator will be called ``comp(current_value, prev_best)``. For metrics where the optimal value is low\n(error, loss, perplexity), use a less than operator and for metrics like accuracy where the optimal value\nis higher, use a greater than operator. Defaults to :func:`torch.less` if loss, error, or perplexity are substrings\nof the monitored metric, otherwise defaults to :func:`torch.greater`"
                                },
                                "stop_on_batch": {
                                    "type": "boolean",
                                    "description": "A bool that indicates whether to stop training in the middle of an epoch if\nthe training metrics satisfy the threshold comparison. Defaults to False."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "monitor",
                                "dataloader_label",
                                "threshold"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^image_visualizer($|\\+)": {
                            "type": "object",
                            "properties": {
                                "interval": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "description": "Time string specifying how often to log train images. For example, ``interval='1ep'``\nmeans images are logged once every epoch, while ``interval='100ba'`` means images are logged once every 100\nbatches. Eval images are logged once at the start of each eval. Default: ``\"100ba\"``."
                                },
                                "mode": {
                                    "type": "string",
                                    "description": "How to log the image labels. Valid values are ``\"input\"`` (input only)\nand \"segmentation\" which also saves segmentation masks. Default: ``\"input\"``."
                                },
                                "num_images": {
                                    "type": "integer",
                                    "description": "Number of images to log. Should be less than or equal to than the microbatch size.\nIf there are not enough images in the microbatch, all the images in the microbatch will be logged.\nDefault: ``8``."
                                },
                                "channels_last": {
                                    "type": "boolean",
                                    "description": "Whether the image channel dimension is the last dimension. Default: ``False``."
                                },
                                "input_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the input\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair.  The default is 0, which corresponds to any sequence, where the first\nelement is the input. Default: ``0``."
                                },
                                "target_key": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ],
                                    "description": "A key that indexes to the target\nfrom the batch. Can also be a pair of get and set functions, where the getter\nis assumed to be first in the pair. The default is 1, which corresponds to any sequence, where the second\nelement is the target. Default: ``1``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                }
            ]
        },
        "26_list": {
            "type": "string"
        },
        "27_list": {
            "anyOf": [
                {
                    "type": "object",
                    "patternProperties": {
                        "^file($|\\+)": {
                            "type": "object",
                            "properties": {
                                "filename": {
                                    "type": "string",
                                    "description": "Format string for the filename.\nThe following format variables are available:\n\n\n+------------------------+-------------------------------------------------------+\n| Variable               | Description                                           |\n+========================+=======================================================+\n| ``{run_name}``         | The name of the training run. See                     |\n|                        | :attr:`~composer.loggers.logger.Logger.run_name`.     |\n+------------------------+-------------------------------------------------------+\n| ``{rank}``             | The global rank, as returned by                       |\n|                        | :func:`~composer.utils.dist.get_global_rank`.         |\n+------------------------+-------------------------------------------------------+\n| ``{local_rank}``       | The local rank of the process, as returned by         |\n|                        | :func:`~composer.utils.dist.get_local_rank`.          |\n+------------------------+-------------------------------------------------------+\n| ``{world_size}``       | The world size, as returned by                        |\n|                        | :func:`~composer.utils.dist.get_world_size`.          |\n+------------------------+-------------------------------------------------------+\n| ``{local_world_size}`` | The local world size, as returned by                  |\n|                        | :func:`~composer.utils.dist.get_local_world_size`.    |\n+------------------------+-------------------------------------------------------+\n| ``{node_rank}``        | The node rank, as returned by                         |\n|                        | :func:`~composer.utils.dist.get_node_rank`.           |\n+------------------------+-------------------------------------------------------+\n\n\n.. note::\n\n    When training with multiple devices (i.e. GPUs), ensure that ``'{rank}'`` appears in the format.\n    Otherwise, multiple processes may attempt to write to the same file.\n\nConsider the following example when using default value of '{run_name}/logs-rank{rank}.txt':\n\n>>> file_logger = FileLogger(filename='{run_name}/logs-rank{rank}.txt')\n>>> trainer = Trainer(loggers=[file_logger], run_name='my-awesome-run')\n>>> file_logger.filename\n'my-awesome-run/logs-rank0.txt'\n\nDefault: `'{run_name}/logs-rank{rank}.txt'`"
                                },
                                "artifact_name": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Format string for the logfile's artifact name.\nThe logfile will be periodically logged (according to the ``flush_interval``) as a file artifact.\nThe artifact name will be determined by this format string.\n\n.. seealso:: :meth:`~composer.loggers.logger.Logger.log_file_artifact` for file artifact logging.\n\nThe same format variables for ``filename`` are available. Setting this parameter to ``None``\n(the default) will use the same format string as ``filename``. It is sometimes helpful to deviate\nfrom this default. For example, when ``filename`` contains an absolute path, it is recommended to\nset this parameter explicitely, so the absolute path does not appear in any artifact stores.\n\nLeading slashes (``'/'``) will be stripped.\n\nDefault: ``None`` (which uses the same format string as ``filename``)"
                                },
                                "capture_stdout": {
                                    "type": "boolean",
                                    "description": "Whether to include the ``stdout``in ``filename``. (default: ``True``)"
                                },
                                "capture_stderr": {
                                    "type": "boolean",
                                    "description": "Whether to include the ``stderr``in ``filename``. (default: ``True``)"
                                },
                                "buffer_size": {
                                    "type": "integer",
                                    "description": "Buffer size. See :py:func:`open`.\nDefault: ``1`` for line buffering."
                                },
                                "log_level": {
                                    "enum": [
                                        "EPOCH",
                                        1,
                                        2,
                                        3,
                                        "epoch",
                                        "FIT",
                                        "fit",
                                        "BATCH",
                                        "batch"
                                    ],
                                    "description": ":class:`~.logger.LogLevel` (i.e. unit of resolution) at\nwhich to record. Default: :attr:`~.LogLevel.EPOCH`."
                                },
                                "log_interval": {
                                    "type": "integer",
                                    "description": "Frequency to print logs. If ``log_level`` is :attr:`~.LogLevel.EPOCH`,\nlogs will only be recorded every n epochs. If ``log_level`` is\n:attr:`~.LogLevel.BATCH`, logs will be printed every n batches.  Otherwise, if\n``log_level`` is :attr:`~.LogLevel.FIT`, this parameter is ignored, as calls\nat the :attr:`~.LogLevel.FIT` log level are always recorded. Default: ``1``."
                                },
                                "flush_interval": {
                                    "type": "integer",
                                    "description": "How frequently to flush the log to the file,\nrelative to the ``log_level``. For example, if the ``log_level`` is\n:attr:`~.LogLevel.EPOCH`, then the logfile will be flushed every n epochs.  If\nthe ``log_level`` is :attr:`~.LogLevel.BATCH`, then the logfile will be\nflushed every n batches. Default: ``100``."
                                },
                                "overwrite": {
                                    "type": "boolean",
                                    "description": "Whether to overwrite an existing logfile. (default: ``False``)"
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^wandb($|\\+)": {
                            "type": "object",
                            "properties": {
                                "project": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "WandB project name."
                                },
                                "group": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "WandB group name."
                                },
                                "name": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "WandB run name.\nIf not specified, the :attr:`.State.run_name` will be used."
                                },
                                "entity": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "WandB entity name."
                                },
                                "tags": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/26_list"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/$defs/26_list"
                                            }
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "WandB tags."
                                },
                                "log_artifacts": {
                                    "type": "boolean",
                                    "description": "Whether to log\n`artifacts <https://docs.wandb.ai/ref/python/artifact>`_ (Default: ``False``)."
                                },
                                "rank_zero_only": {
                                    "type": "boolean",
                                    "description": "Whether to log only on the rank-zero process.\nWhen logging `artifacts <https://docs.wandb.ai/ref/python/artifact>`_, it is\nhighly recommended to log on all ranks.  Artifacts from ranks \u22651 will not be\nstored, which may discard pertinent information. For example, when using\nDeepspeed ZeRO, it would be impossible to restore from checkpoints without\nartifacts from all ranks (default: ``False``)."
                                },
                                "init_kwargs": {
                                    "oneOf": [
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Any additional init kwargs\n``wandb.init`` (see\n`WandB documentation <https://docs.wandb.ai/ref/python/init>`_)."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^progress_bar($|\\+)": {
                            "type": "object",
                            "properties": {
                                "progress_bar": {
                                    "type": "boolean",
                                    "description": "Whether to show a progress bar. (default: ``True``)"
                                },
                                "log_to_console": {
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Whether to print logging statements to the console. (default: ``None``)\nThe default behavior (when set to ``None``) only prints logging statements when ``progress_bar`` is\n``False``."
                                },
                                "console_log_level": {
                                    "enum": [
                                        "EPOCH",
                                        1,
                                        2,
                                        3,
                                        "epoch",
                                        "FIT",
                                        "fit",
                                        "BATCH",
                                        "batch"
                                    ],
                                    "description": "The maximum log level for which statements\nshould be printed. (default: :attr:`.LogLevel.EPOCH`)\n\nIt can either be :class:`.LogLevel`, a string corresponding to a :class:`.LogLevel`, or a callable that\ntakes the training :class:`.State` and the :class:`.LogLevel` and returns a boolean of whether this\nstatement should be printed.\n\nThis parameter has no effect if ``log_to_console`` is ``False`` or is unspecified when ``progress_bar`` is\n``True``."
                                },
                                "stream": {
                                    "type": "string",
                                    "description": "The console stream to use. If a string, it can either be ``'stdout'`` or\n``'stderr'``. (default: :attr:`sys.stderr`)"
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^tensorboard($|\\+)": {
                            "type": "object",
                            "properties": {
                                "log_dir": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "The path to the directory where all the tensorboard logs\nwill be saved. This is also the value that should be specified when starting\na tensorboard server. e.g. `tensorboard --logdir={log_dir}`. If not specified\n`./tensorboard_logs` will be used."
                                },
                                "flush_interval": {
                                    "type": "integer",
                                    "description": "How frequently by batch to flush the log to a file.\nFor example, a flush interval of 10 means the log will be flushed to a file\nevery 10 batches. The logs will also be automatically flushed at the start and\nend of every evaluation phase (`EVENT.EVAL_START` and `EVENT.EVAL_END` ),\nthe end of every epoch (`EVENT.EPOCH_END`), and the end of training\n(`EVENT.FIT_END`). Default: ``100``."
                                },
                                "rank_zero_only": {
                                    "type": "boolean",
                                    "description": "Whether to log only on the rank-zero process.\nRecommended to be true since the rank 0 will have access to most global metrics.\nA setting of `False` may lead to logging of duplicate values.\nDefault: :attr:`True`."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^in_memory($|\\+)": {
                            "type": "object",
                            "properties": {
                                "log_level": {
                                    "enum": [
                                        "EPOCH",
                                        1,
                                        2,
                                        3,
                                        "epoch",
                                        "FIT",
                                        "fit",
                                        "BATCH",
                                        "batch"
                                    ],
                                    "description": ":class:`~.logger.LogLevel` (i.e. unit of resolution) at\nwhich to record. Defaults to\n:attr:`~.LogLevel.BATCH`, which records\neverything."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^object_store($|\\+)": {
                            "type": "object",
                            "properties": {
                                "object_store_hparams": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "patternProperties": {
                                                "^libcloud($|\\+)": {
                                                    "type": "object",
                                                    "properties": {
                                                        "provider": {
                                                            "type": "string",
                                                            "description": "Cloud provider to use. Valid options are:\n* :mod:`~libcloud.storage.drivers.atmos`\n* :mod:`~libcloud.storage.drivers.auroraobjects`\n* :mod:`~libcloud.storage.drivers.azure_blobs`\n* :mod:`~libcloud.storage.drivers.backblaze_b2`\n* :mod:`~libcloud.storage.drivers.cloudfiles`\n* :mod:`~libcloud.storage.drivers.digitalocean_spaces`\n* :mod:`~libcloud.storage.drivers.google_storage`\n* :mod:`~libcloud.storage.drivers.ktucloud`\n* :mod:`~libcloud.storage.drivers.local`\n* :mod:`~libcloud.storage.drivers.minio`\n* :mod:`~libcloud.storage.drivers.nimbus`\n* :mod:`~libcloud.storage.drivers.ninefold`\n* :mod:`~libcloud.storage.drivers.oss`\n* :mod:`~libcloud.storage.drivers.rgw`\n* :mod:`~libcloud.storage.drivers.s3`\n\n.. seealso:: :doc:`Full list of libcloud providers <libcloud:storage/supported_providers>`"
                                                        },
                                                        "container": {
                                                            "type": "string",
                                                            "description": "The name of the container (i.e. bucket) to use."
                                                        },
                                                        "key_environ": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "The name of an environment variable containing an API key or username to use to connect to the provider."
                                                        },
                                                        "secret_environ": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "The name of an environment variable containing an API secret or password to use to connect to the provider."
                                                        },
                                                        "region": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "Cloud region to use"
                                                        },
                                                        "host": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "Override hostname for connections"
                                                        },
                                                        "port": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "integer"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "Override port for connections"
                                                        },
                                                        "extra_init_kwargs": {
                                                            "type": "object",
                                                            "description": "Extra keyword arguments to pass into the constructor for the specified provider."
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "provider",
                                                        "container"
                                                    ],
                                                    "referenced": false
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        {
                                            "type": "object",
                                            "patternProperties": {
                                                "^s3($|\\+)": {
                                                    "type": "object",
                                                    "properties": {
                                                        "bucket": {
                                                            "type": "string",
                                                            "description": "The bucket name."
                                                        },
                                                        "prefix": {
                                                            "type": "string",
                                                            "description": "A path prefix such as `folder/subfolder/` to prepend to object names. Defaults to ''."
                                                        },
                                                        "region_name": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "The region name. Must be specified if not available in\na config file or environment variables. Defaults to None."
                                                        },
                                                        "endpoint_url": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "The URL to an S3-Compatible object store. Must be specified if using something\nother than Amazon S3, like Google Cloud Storage. Defaults to None."
                                                        },
                                                        "client_config": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "object"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "Kwargs dictionary for :class:`botocore.config.Config`. Defaults to None."
                                                        },
                                                        "transfer_config": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "object"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "Kwargs dictionary for :class:`boto3.s3.transfer.TransferConfig`. Defaults to None."
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "bucket"
                                                    ],
                                                    "referenced": false
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        {
                                            "type": "object",
                                            "patternProperties": {
                                                "^sftp($|\\+)": {
                                                    "type": "object",
                                                    "properties": {
                                                        "host": {
                                                            "type": "string",
                                                            "description": "The server to connect to.\nAlso accepts a URI string in the form ``'sftp://username@host:port/./relative/path'``.\nFor an absolute path, use a double `//` -- e.g. ``'sftp://username@host:port//absolute/path'``."
                                                        },
                                                        "port": {
                                                            "type": "integer",
                                                            "description": "The server port to connect to."
                                                        },
                                                        "username": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "The username (if not specified in the SSH config) needed to authenticate.\nDefaults to None."
                                                        },
                                                        "known_hosts_filename": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "The filename of the known hosts file. If not specified,\nthe default SSH known hosts will be used."
                                                        },
                                                        "known_hosts_filename_environ": {
                                                            "type": "string",
                                                            "description": "The name of an environment variable containing the path to a SSH known hosts file. Note that `known_hosts_filename` takes precedence over this variable."
                                                        },
                                                        "key_filename": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "The filepath to the a private key (if required) needed to\nauthenticate. Defaults to None. Any keys specified here will be tried *in addition* to any keys\nspecified in ``~/.ssh/`` or via a SSH agent."
                                                        },
                                                        "key_filename_environ": {
                                                            "type": "string",
                                                            "description": "The name of an environment variable containing the path to a SSH keyfile. Note that `key_filename` takes precedence over this variable."
                                                        },
                                                        "missing_host_key_policy": {
                                                            "type": "string",
                                                            "description": "The class name or instance of\n:class:`paramiko.client.MissingHostKeyPolicy` to use for a missing host key. Defaults to ``'RejectPolicy'``.\n\nBuilt-in options:\n*   ``'RejectPolicy'`` (the default), which will reject any host key not authorized in the ``known_hosts_filename``.\n*   ``'AutoAddPolicy'``, which will add any unknown host key.\n*   ``'WarningPolicy'``, which will warn on an unknown host key.\n\nFor custom logic, subclass :class:`paramiko.client.MissingHostKeyPolicy`, and provide an instance of this class."
                                                        },
                                                        "cwd": {
                                                            "type": "string",
                                                            "description": "The directory to navigate to upon creating the SSH connection. If not present\nit will be created."
                                                        },
                                                        "connect_kwargs": {
                                                            "oneOf": [
                                                                {
                                                                    "type": "object"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ],
                                                            "description": "Any additional kwargs to pass through to :meth:`.SSHClient.connect`."
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "host"
                                                    ],
                                                    "referenced": false
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ],
                                    "description": "Object store provider hparams."
                                },
                                "should_log_artifact": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "Path to a filter function which returns whether an artifact should be logged."
                                },
                                "object_name": {
                                    "type": "string",
                                    "description": "A format string used to determine the object name.\nThe following format variables are available:\n\n+------------------------+-------------------------------------------------------+\n| Variable               | Description                                           |\n+========================+=======================================================+\n| ``{artifact_name}``    | The name of the artifact being logged.                |\n+------------------------+-------------------------------------------------------+\n| ``{run_name}``         | The name of the training run. See                     |\n|                        | :attr:`.State.run_name`.                              |\n+------------------------+-------------------------------------------------------+\n| ``{rank}``             | The global rank, as returned by                       |\n|                        | :func:`~composer.utils.dist.get_global_rank`.         |\n+------------------------+-------------------------------------------------------+\n| ``{local_rank}``       | The local rank of the process, as returned by         |\n|                        | :func:`~composer.utils.dist.get_local_rank`.          |\n+------------------------+-------------------------------------------------------+\n| ``{world_size}``       | The world size, as returned by                        |\n|                        | :func:`~composer.utils.dist.get_world_size`.          |\n+------------------------+-------------------------------------------------------+\n| ``{local_world_size}`` | The local world size, as returned by                  |\n|                        | :func:`~composer.utils.dist.get_local_world_size`.    |\n+------------------------+-------------------------------------------------------+\n| ``{node_rank}``        | The node rank, as returned by                         |\n|                        | :func:`~composer.utils.dist.get_node_rank`.           |\n+------------------------+-------------------------------------------------------+\n\nLeading slashes (``'/'``) will be stripped.\n\nConsider the following example, which subfolders the artifacts by their rank:\n\n.. testsetup:: composer.loggers.object_store_logger.ObjectStoreLogger.__init__.object_name\n\n    import os\n\n    os.makedirs('path/to', exist_ok=True)\n\n    with open('path/to/file.txt', 'w+') as f:\n        f.write('hi')\n\n.. doctest:: composer.loggers.object_store_logger.ObjectStoreLogger.__init__.object_name\n\n    >>> object_store_logger = ObjectStoreLogger(..., object_name='rank_{rank}/{artifact_name}')\n    >>> trainer = Trainer(..., run_name='foo', loggers=[object_store_logger])\n    >>> trainer.logger.file_artifact(\n    ...     log_level=LogLevel.EPOCH,\n    ...     artifact_name='bar.txt',\n    ...     file_path='path/to/file.txt',\n    ... )\n\n.. testcleanup:: composer.loggers.object_store_logger.ObjectStoreLogger.__init__.object_name\n\n    # Shut down the uploader\n    object_store_logger._check_workers()\n    object_store_logger.post_close()\n\nAssuming that the process's rank is ``0``, the object store would store the contents of\n``'path/to/file.txt'`` in an object named ``'rank0/bar.txt'``.\n\nDefault: ``'{artifact_name}'``"
                                },
                                "num_concurrent_uploads": {
                                    "type": "integer",
                                    "description": "Maximum number of concurrent uploads. Defaults to 4."
                                },
                                "use_procs": {
                                    "type": "boolean",
                                    "description": "Whether to perform file uploads in background processes (as opposed to threads).\nDefaults to True."
                                },
                                "upload_staging_folder": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "description": "A folder to use for staging uploads.\nIf not specified, defaults to using a :func:`~tempfile.TemporaryDirectory`."
                                },
                                "num_attempts": {
                                    "type": "integer",
                                    "description": "For operations that fail with a transient error, the number of attempts to make.\nDefaults to 3."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "object_store_hparams"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                }
            ]
        },
        "28_list": {
            "type": "string"
        },
        "29_list": {
            "type": "string"
        },
        "30_list": {
            "anyOf": [
                {
                    "type": "object",
                    "patternProperties": {
                        "^json($|\\+)": {
                            "type": "object"
                        }
                    },
                    "additionalProperties": false
                }
            ]
        },
        "31_list": {
            "type": "string"
        },
        "32_list": {
            "type": "string"
        },
        "33_list": {
            "type": "string"
        },
        "34_list": {
            "anyOf": [
                {
                    "type": "object",
                    "patternProperties": {
                        "^step($|\\+)": {
                            "type": "object",
                            "properties": {
                                "step_size": {
                                    "type": "string",
                                    "description": "Time between changes to the learning rate."
                                },
                                "gamma": {
                                    "type": "number",
                                    "description": "Multiplicative decay factor. Default = ``0.1``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "step_size"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^multistep($|\\+)": {
                            "type": "object",
                            "properties": {
                                "milestones": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/32_list"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/$defs/32_list"
                                            }
                                        }
                                    ],
                                    "description": "Times at which the learning rate should change."
                                },
                                "gamma": {
                                    "type": "number",
                                    "description": "Multiplicative decay factor. Default = ``0.1``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "milestones"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^exponential($|\\+)": {
                            "type": "object",
                            "properties": {
                                "gamma": {
                                    "type": "number",
                                    "description": "Multiplicative decay factor."
                                },
                                "decay_period": {
                                    "type": "string",
                                    "description": "Decay period. Default = ``\"1ep\"``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "gamma"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^linear_decay($|\\+)": {
                            "type": "object",
                            "properties": {
                                "alpha_i": {
                                    "type": "number",
                                    "description": "Initial learning rate multiplier. Default = ``1.0``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Final learning rate multiplier. Default = ``0.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^cosine_decay($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^cosine_warmrestart($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_0": {
                                    "type": "string",
                                    "description": "The period of the first cycle."
                                },
                                "t_mult": {
                                    "type": "number",
                                    "description": "The multiplier for the duration of successive cycles. Default = ``1.0``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_0"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^constant($|\\+)": {
                            "type": "object",
                            "properties": {
                                "alpha": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to maintain while this scheduler is active. Default = ``1.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "Duration of this scheduler. Default = ``\"1dur\"``."
                                }
                            },
                            "additionalProperties": false,
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^polynomial($|\\+)": {
                            "type": "object",
                            "properties": {
                                "power": {
                                    "type": "number",
                                    "description": "The exponent to be used for the proportionality relationship."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "power"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^polynomial_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "power": {
                                    "type": "number",
                                    "description": "The exponent to be used for the proportionality relationship. Default = ``2.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^multistep_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "milestones": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/33_list"
                                        },
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/$defs/33_list"
                                            }
                                        }
                                    ],
                                    "description": "Times at which the learning rate should change."
                                },
                                "gamma": {
                                    "type": "number",
                                    "description": "Multiplicative decay factor. Default = ``0.1``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup",
                                "milestones"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^constant_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "alpha": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to maintain while this scheduler is active. Default = ``1.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "Duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^linear_decay_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "alpha_i": {
                                    "type": "number",
                                    "description": "Initial learning rate multiplier. Default = ``1.0``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Final learning rate multiplier. Default = ``0.0``."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "type": "object",
                    "patternProperties": {
                        "^cosine_decay_with_warmup($|\\+)": {
                            "type": "object",
                            "properties": {
                                "t_warmup": {
                                    "type": "string",
                                    "description": "Warmup time."
                                },
                                "t_max": {
                                    "type": "string",
                                    "description": "The duration of this scheduler. Default = ``\"1dur\"``."
                                },
                                "alpha_f": {
                                    "type": "number",
                                    "description": "Learning rate multiplier to decay to. Default = ``0.0``."
                                },
                                "scale_warmup": {
                                    "type": "boolean",
                                    "description": "SSR also scales the warmup period. Default = ``False``."
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "t_warmup"
                            ],
                            "referenced": false
                        }
                    },
                    "additionalProperties": false
                }
            ]
        },
        "35_list": {
            "type": "string"
        },
        "36_list": {
            "type": "string"
        },
        "37_list": {
            "type": "string"
        },
        "38_list": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Name of the Evaluator."
                },
                "eval_dataset": {
                    "anyOf": [
                        {
                            "type": "object",
                            "patternProperties": {
                                "^ade20k($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val', 'test']"
                                        },
                                        "base_size": {
                                            "type": "integer",
                                            "description": "Initial size of the image and target before other augmentations"
                                        },
                                        "min_resize_scale": {
                                            "type": "number",
                                            "description": "Minimum value that the image and target can be scaled"
                                        },
                                        "max_resize_scale": {
                                            "type": "number",
                                            "description": "Maximum value that the image and target can be scaled"
                                        },
                                        "final_size": {
                                            "type": "integer",
                                            "description": "Final size of the image and target"
                                        },
                                        "ignore_background": {
                                            "type": "boolean",
                                            "description": "If true, ignore the background class in training loss"
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_ade20k($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        },
                                        "base_size": {
                                            "type": "integer",
                                            "description": "Initial size of the image and target before other augmentations"
                                        },
                                        "min_resize_scale": {
                                            "type": "number",
                                            "description": "Minimum value that the image and target can be scaled"
                                        },
                                        "max_resize_scale": {
                                            "type": "number",
                                            "description": "Maximum value that the image and target can be scaled"
                                        },
                                        "final_size": {
                                            "type": "integer",
                                            "description": "Final size of the image and target"
                                        },
                                        "ignore_background": {
                                            "type": "boolean",
                                            "description": "If true, ignore the background class in training loss"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^brats($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "oversampling": {
                                            "type": "number",
                                            "description": "oversampling"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^imagenet($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "resize_size": {
                                            "type": "integer",
                                            "description": "resize size. Set to -1 to not resize"
                                        },
                                        "crop_size": {
                                            "type": "integer",
                                            "description": "crop size"
                                        },
                                        "use_ffcv": {
                                            "type": "boolean",
                                            "description": "whether to use ffcv for faster dataloading"
                                        },
                                        "ffcv_cpu_only": {
                                            "type": "boolean",
                                            "description": "Use cpu for all transformations."
                                        },
                                        "ffcv_dir": {
                                            "type": "string",
                                            "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                        },
                                        "ffcv_dest": {
                                            "type": "string",
                                            "description": "<file>.ffcv file that has dataset samples"
                                        },
                                        "ffcv_write_dataset": {
                                            "type": "boolean",
                                            "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_imagenet1k($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        },
                                        "resize_size": {
                                            "type": "integer",
                                            "description": "Resize size. Set to -1 to not resize"
                                        },
                                        "crop_size": {
                                            "type": "integer",
                                            "description": "Crop size"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^cifar10($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "download": {
                                            "type": "boolean",
                                            "description": "whether to download the dataset, if needed"
                                        },
                                        "use_ffcv": {
                                            "type": "boolean",
                                            "description": "whether to use ffcv for faster dataloading"
                                        },
                                        "ffcv_dir": {
                                            "type": "string",
                                            "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                        },
                                        "ffcv_dest": {
                                            "type": "string",
                                            "description": "<file>.ffcv file that has dataset samples"
                                        },
                                        "ffcv_write_dataset": {
                                            "type": "boolean",
                                            "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_cifar10($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^mnist($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "download": {
                                            "type": "boolean",
                                            "description": "whether to download the dataset, if needed"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^lm($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/36_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/36_list"
                                                    }
                                                }
                                            ],
                                            "description": "Path to the Huggingface Datasets directory."
                                        },
                                        "split": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to use 'train', 'validation' or 'test' split."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The name of the tokenizer to preprocess text with."
                                        },
                                        "use_masked_lm": {
                                            "type": "boolean",
                                            "description": "Whether the dataset should be encoded with masked language modeling or not."
                                        },
                                        "num_tokens": {
                                            "type": "integer",
                                            "description": "If desired, the number of tokens to truncate the dataset to."
                                        },
                                        "mlm_probability": {
                                            "type": "number",
                                            "description": "If using masked language modeling, the probability to mask tokens with."
                                        },
                                        "seed": {
                                            "type": "integer",
                                            "description": "Which seed to use to generate train and validation splits."
                                        },
                                        "subsample_ratio": {
                                            "type": "number",
                                            "description": "If desired, the percentage of the dataset to use."
                                        },
                                        "max_seq_length": {
                                            "type": "integer",
                                            "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^glue($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "task": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The GLUE task to train on, choose one from: CoLA, MNLI, MRPC, QNLI, QQP, RTE, SST-2, and STS-B."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                        },
                                        "split": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to use 'train', 'validation' or 'test' split."
                                        },
                                        "max_seq_length": {
                                            "type": "integer",
                                            "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                        },
                                        "max_network_retries": {
                                            "type": "integer",
                                            "description": "Optionally, the number of times to retry HTTP requests if they fail."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^coco($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_coco($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^c4($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "Whether to drop the last samples for the last batch."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the samples in the dataset. Currently, shards are assigned and consumed with deterministic per-device shard order, but shuffling affects the order of samples via (per-device) shuffle buffers."
                                        },
                                        "split": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "What split of the dataset to use. Either `train` or `validation`."
                                        },
                                        "num_samples": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of post-processed token samples, used to set epoch size of the IterableDataset."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                        },
                                        "max_seq_len": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The max sequence length of each token sample."
                                        },
                                        "group_method": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "How to group text samples into token samples. Either `truncate` or `concat`."
                                        },
                                        "mlm": {
                                            "type": "boolean",
                                            "description": "Whether or not to use masked language modeling."
                                        },
                                        "mlm_probability": {
                                            "type": "number",
                                            "description": "If `mlm==True`, the probability that tokens are masked."
                                        },
                                        "shuffle_buffer_size": {
                                            "type": "integer",
                                            "description": "If `shuffle=True`, samples are read into a buffer of this size (per-device), and randomly sampled from there to produce shuffled samples."
                                        },
                                        "seed": {
                                            "type": "integer",
                                            "description": "If `shuffle=True`, what seed to use for shuffling operations."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_c4($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "What split of the dataset to use. Either `train` or `val`."
                                        },
                                        "tokenizer_name": {
                                            "type": "string",
                                            "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                        },
                                        "max_seq_len": {
                                            "type": "integer",
                                            "description": "The max sequence length of each token sample."
                                        },
                                        "group_method": {
                                            "type": "string",
                                            "description": "How to group text samples into token samples. Currently only `truncate` is supported."
                                        },
                                        "mlm": {
                                            "type": "boolean",
                                            "description": "Whether or not to use masked language modeling."
                                        },
                                        "mlm_probability": {
                                            "type": "number",
                                            "description": "If `mlm==True`, the probability that tokens are masked."
                                        },
                                        "max_retries": {
                                            "type": "integer",
                                            "description": "Number of download re-attempts before giving up."
                                        },
                                        "timeout": {
                                            "type": "number",
                                            "description": "How long to wait for shard to download before raising an exception."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ],
                    "description": "Evaluator dataset for the Evaluator"
                },
                "eval_interval": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "An integer,\nwhich will be interpreted to be epochs, a str (e.g. ``1ep``, or ``10ba``), a :class:`.Time` object, or a callable.\nDefaults to ``None``, which means that the ``eval_interval`` parameter from the :class:`.Trainer` will be used.\n\nIf an integer (in epochs), :class:`.Time` string, or :class:`.Time` instance, the evaluator will be run\nwith this frequency. :class:`.Time` strings or :class:`.Time` instances must have units of\n:attr:`.TimeUnit.BATCH` or :attr:`.TimeUnit.EPOCH`.\n\nSet to ``0`` to disable evaluation.\n\nIf a callable, it should take two arguments (:class:`.State`, :class:`.Event`) and return a bool\nrepresenting whether the evaluator should be invoked. The event will be either :attr:`.Event.BATCH_END`\nor :attr:`.Event.EPOCH_END`.\n\nWhen specifying ``eval_interval``, the evaluator(s) are also run at the ``Event.FIT_END`` if it doesn't\nevenly divide the training duration."
                },
                "subset_num_batches": {
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The maximum number of batches to use for each evaluation. Defaults to ``None``,\nwhich means that the ``eval_subset_num_batches`` parameter from the :class:`.Trainer` will be used.\nSet to ``-1`` to evaluate the entire ``dataloader``"
                },
                "metric_names": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/37_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/37_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Name of the metrics for the evaluator. Can be a torchmetrics metric name or the\n        class name of a metric returned by model.metrics(). If None (the default), uses all metrics in the model"
                }
            },
            "additionalProperties": false,
            "required": [
                "label",
                "eval_dataset"
            ]
        },
        "39_list": {
            "type": "object",
            "properties": {
                "train_dataset": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^ade20k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val', 'test']"
                                                },
                                                "base_size": {
                                                    "type": "integer",
                                                    "description": "Initial size of the image and target before other augmentations"
                                                },
                                                "min_resize_scale": {
                                                    "type": "number",
                                                    "description": "Minimum value that the image and target can be scaled"
                                                },
                                                "max_resize_scale": {
                                                    "type": "number",
                                                    "description": "Maximum value that the image and target can be scaled"
                                                },
                                                "final_size": {
                                                    "type": "integer",
                                                    "description": "Final size of the image and target"
                                                },
                                                "ignore_background": {
                                                    "type": "boolean",
                                                    "description": "If true, ignore the background class in training loss"
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_ade20k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                },
                                                "base_size": {
                                                    "type": "integer",
                                                    "description": "Initial size of the image and target before other augmentations"
                                                },
                                                "min_resize_scale": {
                                                    "type": "number",
                                                    "description": "Minimum value that the image and target can be scaled"
                                                },
                                                "max_resize_scale": {
                                                    "type": "number",
                                                    "description": "Maximum value that the image and target can be scaled"
                                                },
                                                "final_size": {
                                                    "type": "integer",
                                                    "description": "Final size of the image and target"
                                                },
                                                "ignore_background": {
                                                    "type": "boolean",
                                                    "description": "If true, ignore the background class in training loss"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^brats($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "oversampling": {
                                                    "type": "number",
                                                    "description": "oversampling"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^imagenet($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "resize_size": {
                                                    "type": "integer",
                                                    "description": "resize size. Set to -1 to not resize"
                                                },
                                                "crop_size": {
                                                    "type": "integer",
                                                    "description": "crop size"
                                                },
                                                "use_ffcv": {
                                                    "type": "boolean",
                                                    "description": "whether to use ffcv for faster dataloading"
                                                },
                                                "ffcv_cpu_only": {
                                                    "type": "boolean",
                                                    "description": "Use cpu for all transformations."
                                                },
                                                "ffcv_dir": {
                                                    "type": "string",
                                                    "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                                },
                                                "ffcv_dest": {
                                                    "type": "string",
                                                    "description": "<file>.ffcv file that has dataset samples"
                                                },
                                                "ffcv_write_dataset": {
                                                    "type": "boolean",
                                                    "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_imagenet1k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                },
                                                "resize_size": {
                                                    "type": "integer",
                                                    "description": "Resize size. Set to -1 to not resize"
                                                },
                                                "crop_size": {
                                                    "type": "integer",
                                                    "description": "Crop size"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^cifar10($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "download": {
                                                    "type": "boolean",
                                                    "description": "whether to download the dataset, if needed"
                                                },
                                                "use_ffcv": {
                                                    "type": "boolean",
                                                    "description": "whether to use ffcv for faster dataloading"
                                                },
                                                "ffcv_dir": {
                                                    "type": "string",
                                                    "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                                },
                                                "ffcv_dest": {
                                                    "type": "string",
                                                    "description": "<file>.ffcv file that has dataset samples"
                                                },
                                                "ffcv_write_dataset": {
                                                    "type": "boolean",
                                                    "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_cifar10($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^mnist($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "download": {
                                                    "type": "boolean",
                                                    "description": "whether to download the dataset, if needed"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^lm($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "$ref": "#/$defs/31_list"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/31_list"
                                                            }
                                                        }
                                                    ],
                                                    "description": "Path to the Huggingface Datasets directory."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Whether to use 'train', 'validation' or 'test' split."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the tokenizer to preprocess text with."
                                                },
                                                "use_masked_lm": {
                                                    "type": "boolean",
                                                    "description": "Whether the dataset should be encoded with masked language modeling or not."
                                                },
                                                "num_tokens": {
                                                    "type": "integer",
                                                    "description": "If desired, the number of tokens to truncate the dataset to."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If using masked language modeling, the probability to mask tokens with."
                                                },
                                                "seed": {
                                                    "type": "integer",
                                                    "description": "Which seed to use to generate train and validation splits."
                                                },
                                                "subsample_ratio": {
                                                    "type": "number",
                                                    "description": "If desired, the percentage of the dataset to use."
                                                },
                                                "max_seq_length": {
                                                    "type": "integer",
                                                    "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^glue($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "task": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The GLUE task to train on, choose one from: CoLA, MNLI, MRPC, QNLI, QQP, RTE, SST-2, and STS-B."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Whether to use 'train', 'validation' or 'test' split."
                                                },
                                                "max_seq_length": {
                                                    "type": "integer",
                                                    "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                                },
                                                "max_network_retries": {
                                                    "type": "integer",
                                                    "description": "Optionally, the number of times to retry HTTP requests if they fail."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^coco($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_coco($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^c4($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "Whether to drop the last samples for the last batch."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the samples in the dataset. Currently, shards are assigned and consumed with deterministic per-device shard order, but shuffling affects the order of samples via (per-device) shuffle buffers."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "What split of the dataset to use. Either `train` or `validation`."
                                                },
                                                "num_samples": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The number of post-processed token samples, used to set epoch size of the IterableDataset."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "max_seq_len": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The max sequence length of each token sample."
                                                },
                                                "group_method": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "How to group text samples into token samples. Either `truncate` or `concat`."
                                                },
                                                "mlm": {
                                                    "type": "boolean",
                                                    "description": "Whether or not to use masked language modeling."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If `mlm==True`, the probability that tokens are masked."
                                                },
                                                "shuffle_buffer_size": {
                                                    "type": "integer",
                                                    "description": "If `shuffle=True`, samples are read into a buffer of this size (per-device), and randomly sampled from there to produce shuffled samples."
                                                },
                                                "seed": {
                                                    "type": "integer",
                                                    "description": "If `shuffle=True`, what seed to use for shuffling operations."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_c4($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "What split of the dataset to use. Either `train` or `val`."
                                                },
                                                "tokenizer_name": {
                                                    "type": "string",
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "max_seq_len": {
                                                    "type": "integer",
                                                    "description": "The max sequence length of each token sample."
                                                },
                                                "group_method": {
                                                    "type": "string",
                                                    "description": "How to group text samples into token samples. Currently only `truncate` is supported."
                                                },
                                                "mlm": {
                                                    "type": "boolean",
                                                    "description": "Whether or not to use masked language modeling."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If `mlm==True`, the probability that tokens are masked."
                                                },
                                                "max_retries": {
                                                    "type": "integer",
                                                    "description": "Number of download re-attempts before giving up."
                                                },
                                                "timeout": {
                                                    "type": "number",
                                                    "description": "How long to wait for shard to download before raising an exception."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Train dataset"
                },
                "train_batch_size": {
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "batch size for each optimization step, across all devices and gradient accumulations."
                },
                "train_dataloader_label": {
                    "type": "string",
                    "description": "See :class:`.Trainer`."
                },
                "train_subset_num_batches": {
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "See :class:`.Trainer`."
                },
                "compute_training_metrics": {
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "See :class:`.Trainer`."
                },
                "reset_time": {
                    "type": "boolean",
                    "description": "Whether to reset the :attr:`.State.timestamp` to zero values. Defaults to False.\nIf ``True``, the timestamp will be zeroed out, causing :class:`.ComposerScheduler` and\n:class:`.Algorithm` instances to start from the beginning, as if it is a new training run. The model\nwill be trained for ``duration``, if specified, or for :attr:`.State.max_duration`, which would have\nbeen provided when constructing the :class:`.Trainer` or by a previous call to :meth:`.fit`.\n\n.. note::\n\n    Model gradients, optimizer states, and native PyTorch schedulers will not be reset.\n\nIf ``False`` (the default), training time will be incremented from where the previous call to\n:meth:`.fit` finished (or from zero, if a new training run).\nThe :attr:`~.State.max_duration` will be incremented by the ``duration`` parameter."
                },
                "duration": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "The duration to train. Can be an integer, which will be\ninterpreted to be epochs, a str (e.g. ``1ep``, or ``10ba``), or a :class:`.Time` object.\n\nIf ``reset_time`` is False (the default), then :attr:`.State.max_duration` will be converted\ninto the same units as this parameter (if necessary), and then the max duration incremented by the\nvalue of this parameter.\n\nIf ``reset_time`` is True, then :attr:`.State.max_duration` will be set to this parameter."
                },
                "schedulers": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/34_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/34_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "See :class:`.Trainer`."
                },
                "scale_schedule_ratio": {
                    "type": "number",
                    "description": "Ratio by which to scale the training duration and learning rate schedules."
                },
                "step_schedulers_every_batch": {
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "See :class:`.Trainer`."
                },
                "eval_dataset": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^ade20k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val', 'test']"
                                                },
                                                "base_size": {
                                                    "type": "integer",
                                                    "description": "Initial size of the image and target before other augmentations"
                                                },
                                                "min_resize_scale": {
                                                    "type": "number",
                                                    "description": "Minimum value that the image and target can be scaled"
                                                },
                                                "max_resize_scale": {
                                                    "type": "number",
                                                    "description": "Maximum value that the image and target can be scaled"
                                                },
                                                "final_size": {
                                                    "type": "integer",
                                                    "description": "Final size of the image and target"
                                                },
                                                "ignore_background": {
                                                    "type": "boolean",
                                                    "description": "If true, ignore the background class in training loss"
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_ade20k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                },
                                                "base_size": {
                                                    "type": "integer",
                                                    "description": "Initial size of the image and target before other augmentations"
                                                },
                                                "min_resize_scale": {
                                                    "type": "number",
                                                    "description": "Minimum value that the image and target can be scaled"
                                                },
                                                "max_resize_scale": {
                                                    "type": "number",
                                                    "description": "Maximum value that the image and target can be scaled"
                                                },
                                                "final_size": {
                                                    "type": "integer",
                                                    "description": "Final size of the image and target"
                                                },
                                                "ignore_background": {
                                                    "type": "boolean",
                                                    "description": "If true, ignore the background class in training loss"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^brats($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "oversampling": {
                                                    "type": "number",
                                                    "description": "oversampling"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^imagenet($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "resize_size": {
                                                    "type": "integer",
                                                    "description": "resize size. Set to -1 to not resize"
                                                },
                                                "crop_size": {
                                                    "type": "integer",
                                                    "description": "crop size"
                                                },
                                                "use_ffcv": {
                                                    "type": "boolean",
                                                    "description": "whether to use ffcv for faster dataloading"
                                                },
                                                "ffcv_cpu_only": {
                                                    "type": "boolean",
                                                    "description": "Use cpu for all transformations."
                                                },
                                                "ffcv_dir": {
                                                    "type": "string",
                                                    "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                                },
                                                "ffcv_dest": {
                                                    "type": "string",
                                                    "description": "<file>.ffcv file that has dataset samples"
                                                },
                                                "ffcv_write_dataset": {
                                                    "type": "boolean",
                                                    "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_imagenet1k($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                },
                                                "resize_size": {
                                                    "type": "integer",
                                                    "description": "Resize size. Set to -1 to not resize"
                                                },
                                                "crop_size": {
                                                    "type": "integer",
                                                    "description": "Crop size"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^cifar10($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "download": {
                                                    "type": "boolean",
                                                    "description": "whether to download the dataset, if needed"
                                                },
                                                "use_ffcv": {
                                                    "type": "boolean",
                                                    "description": "whether to use ffcv for faster dataloading"
                                                },
                                                "ffcv_dir": {
                                                    "type": "string",
                                                    "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                                },
                                                "ffcv_dest": {
                                                    "type": "string",
                                                    "description": "<file>.ffcv file that has dataset samples"
                                                },
                                                "ffcv_write_dataset": {
                                                    "type": "boolean",
                                                    "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_cifar10($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^mnist($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "download": {
                                                    "type": "boolean",
                                                    "description": "whether to download the dataset, if needed"
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^lm($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "$ref": "#/$defs/35_list"
                                                        },
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/$defs/35_list"
                                                            }
                                                        }
                                                    ],
                                                    "description": "Path to the Huggingface Datasets directory."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Whether to use 'train', 'validation' or 'test' split."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the tokenizer to preprocess text with."
                                                },
                                                "use_masked_lm": {
                                                    "type": "boolean",
                                                    "description": "Whether the dataset should be encoded with masked language modeling or not."
                                                },
                                                "num_tokens": {
                                                    "type": "integer",
                                                    "description": "If desired, the number of tokens to truncate the dataset to."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If using masked language modeling, the probability to mask tokens with."
                                                },
                                                "seed": {
                                                    "type": "integer",
                                                    "description": "Which seed to use to generate train and validation splits."
                                                },
                                                "subsample_ratio": {
                                                    "type": "number",
                                                    "description": "If desired, the percentage of the dataset to use."
                                                },
                                                "max_seq_length": {
                                                    "type": "integer",
                                                    "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^glue($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "use_synthetic": {
                                                    "type": "boolean",
                                                    "description": "Whether to use synthetic data. Defaults to False."
                                                },
                                                "synthetic_num_unique_samples": {
                                                    "type": "integer",
                                                    "description": "The number of unique samples to allocate memory for."
                                                },
                                                "synthetic_device": {
                                                    "type": "string",
                                                    "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                                },
                                                "synthetic_memory_format": {
                                                    "enum": [
                                                        "CONTIGUOUS_FORMAT",
                                                        "CHANNELS_LAST_3D",
                                                        "preserve_format",
                                                        "contiguous_format",
                                                        "PRESERVE_FORMAT",
                                                        "channels_last",
                                                        "CHANNELS_LAST",
                                                        "channels_last_3d"
                                                    ],
                                                    "description": "Memory format. Defaults to contiguous format."
                                                },
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "task": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The GLUE task to train on, choose one from: CoLA, MNLI, MRPC, QNLI, QQP, RTE, SST-2, and STS-B."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "Whether to use 'train', 'validation' or 'test' split."
                                                },
                                                "max_seq_length": {
                                                    "type": "integer",
                                                    "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                                },
                                                "max_network_retries": {
                                                    "type": "integer",
                                                    "description": "Optionally, the number of times to retry HTTP requests if they fail."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^coco($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "is_train": {
                                                    "type": "boolean",
                                                    "description": "Whether to load the training data (the default) or validation data."
                                                },
                                                "datadir": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The path to the data directory"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_coco($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "Which split of the dataset to use. Either ['train', 'val']"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^c4($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "Whether to drop the last samples for the last batch."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the samples in the dataset. Currently, shards are assigned and consumed with deterministic per-device shard order, but shuffling affects the order of samples via (per-device) shuffle buffers."
                                                },
                                                "split": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "What split of the dataset to use. Either `train` or `validation`."
                                                },
                                                "num_samples": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The number of post-processed token samples, used to set epoch size of the IterableDataset."
                                                },
                                                "tokenizer_name": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "max_seq_len": {
                                                    "oneOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "The max sequence length of each token sample."
                                                },
                                                "group_method": {
                                                    "oneOf": [
                                                        {
                                                            "type": "string"
                                                        },
                                                        {
                                                            "type": "null"
                                                        }
                                                    ],
                                                    "description": "How to group text samples into token samples. Either `truncate` or `concat`."
                                                },
                                                "mlm": {
                                                    "type": "boolean",
                                                    "description": "Whether or not to use masked language modeling."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If `mlm==True`, the probability that tokens are masked."
                                                },
                                                "shuffle_buffer_size": {
                                                    "type": "integer",
                                                    "description": "If `shuffle=True`, samples are read into a buffer of this size (per-device), and randomly sampled from there to produce shuffled samples."
                                                },
                                                "seed": {
                                                    "type": "integer",
                                                    "description": "If `shuffle=True`, what seed to use for shuffling operations."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        "^streaming_c4($|\\+)": {
                                            "type": "object",
                                            "properties": {
                                                "drop_last": {
                                                    "type": "boolean",
                                                    "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                                },
                                                "shuffle": {
                                                    "type": "boolean",
                                                    "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                                },
                                                "remote": {
                                                    "type": "string",
                                                    "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                                },
                                                "local": {
                                                    "type": "string",
                                                    "description": "Local filesystem directory where dataset is cached during operation"
                                                },
                                                "split": {
                                                    "type": "string",
                                                    "description": "What split of the dataset to use. Either `train` or `val`."
                                                },
                                                "tokenizer_name": {
                                                    "type": "string",
                                                    "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                                },
                                                "max_seq_len": {
                                                    "type": "integer",
                                                    "description": "The max sequence length of each token sample."
                                                },
                                                "group_method": {
                                                    "type": "string",
                                                    "description": "How to group text samples into token samples. Currently only `truncate` is supported."
                                                },
                                                "mlm": {
                                                    "type": "boolean",
                                                    "description": "Whether or not to use masked language modeling."
                                                },
                                                "mlm_probability": {
                                                    "type": "number",
                                                    "description": "If `mlm==True`, the probability that tokens are masked."
                                                },
                                                "max_retries": {
                                                    "type": "integer",
                                                    "description": "Number of download re-attempts before giving up."
                                                },
                                                "timeout": {
                                                    "type": "number",
                                                    "description": "How long to wait for shard to download before raising an exception."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "referenced": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Validation dataset hparams"
                },
                "evaluators": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/38_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/38_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Evaluators"
                },
                "eval_batch_size": {
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "batch size to use for each evaluation step"
                },
                "eval_interval": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "See :class:`.Trainer`."
                },
                "eval_subset_num_batches": {
                    "type": "integer",
                    "description": "See :class:`.Trainer`."
                },
                "precision": {
                    "oneOf": [
                        {
                            "enum": [
                                "bf16",
                                "fp32",
                                "AMP",
                                "BF16",
                                "amp",
                                "FP16",
                                "fp16",
                                "FP32"
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "See :class:`.Trainer`."
                },
                "grad_accum": {
                    "oneOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "See :class:`.Trainer`."
                }
            },
            "additionalProperties": false,
            "required": [
                "train_dataset"
            ]
        },
        "40_list": {
            "type": "string"
        },
        "41_list": {
            "type": "string"
        },
        "42_list": {
            "type": "object",
            "properties": {
                "dataset": {
                    "anyOf": [
                        {
                            "type": "object",
                            "patternProperties": {
                                "^ade20k($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val', 'test']"
                                        },
                                        "base_size": {
                                            "type": "integer",
                                            "description": "Initial size of the image and target before other augmentations"
                                        },
                                        "min_resize_scale": {
                                            "type": "number",
                                            "description": "Minimum value that the image and target can be scaled"
                                        },
                                        "max_resize_scale": {
                                            "type": "number",
                                            "description": "Maximum value that the image and target can be scaled"
                                        },
                                        "final_size": {
                                            "type": "integer",
                                            "description": "Final size of the image and target"
                                        },
                                        "ignore_background": {
                                            "type": "boolean",
                                            "description": "If true, ignore the background class in training loss"
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_ade20k($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        },
                                        "base_size": {
                                            "type": "integer",
                                            "description": "Initial size of the image and target before other augmentations"
                                        },
                                        "min_resize_scale": {
                                            "type": "number",
                                            "description": "Minimum value that the image and target can be scaled"
                                        },
                                        "max_resize_scale": {
                                            "type": "number",
                                            "description": "Maximum value that the image and target can be scaled"
                                        },
                                        "final_size": {
                                            "type": "integer",
                                            "description": "Final size of the image and target"
                                        },
                                        "ignore_background": {
                                            "type": "boolean",
                                            "description": "If true, ignore the background class in training loss"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^brats($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "oversampling": {
                                            "type": "number",
                                            "description": "oversampling"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^imagenet($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "resize_size": {
                                            "type": "integer",
                                            "description": "resize size. Set to -1 to not resize"
                                        },
                                        "crop_size": {
                                            "type": "integer",
                                            "description": "crop size"
                                        },
                                        "use_ffcv": {
                                            "type": "boolean",
                                            "description": "whether to use ffcv for faster dataloading"
                                        },
                                        "ffcv_cpu_only": {
                                            "type": "boolean",
                                            "description": "Use cpu for all transformations."
                                        },
                                        "ffcv_dir": {
                                            "type": "string",
                                            "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                        },
                                        "ffcv_dest": {
                                            "type": "string",
                                            "description": "<file>.ffcv file that has dataset samples"
                                        },
                                        "ffcv_write_dataset": {
                                            "type": "boolean",
                                            "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_imagenet1k($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        },
                                        "resize_size": {
                                            "type": "integer",
                                            "description": "Resize size. Set to -1 to not resize"
                                        },
                                        "crop_size": {
                                            "type": "integer",
                                            "description": "Crop size"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^cifar10($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "download": {
                                            "type": "boolean",
                                            "description": "whether to download the dataset, if needed"
                                        },
                                        "use_ffcv": {
                                            "type": "boolean",
                                            "description": "whether to use ffcv for faster dataloading"
                                        },
                                        "ffcv_dir": {
                                            "type": "string",
                                            "description": "A directory containing train/val <file>.ffcv files. If these files don't exist and ffcv_write_dataset is true, train/val <file>.ffcv files will be created in this dir."
                                        },
                                        "ffcv_dest": {
                                            "type": "string",
                                            "description": "<file>.ffcv file that has dataset samples"
                                        },
                                        "ffcv_write_dataset": {
                                            "type": "boolean",
                                            "description": "Whether to create dataset in FFCV format (<file>.ffcv) if it doesn't exist"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_cifar10($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^mnist($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "download": {
                                            "type": "boolean",
                                            "description": "whether to download the dataset, if needed"
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^lm($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/$defs/40_list"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/$defs/40_list"
                                                    }
                                                }
                                            ],
                                            "description": "Path to the Huggingface Datasets directory."
                                        },
                                        "split": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to use 'train', 'validation' or 'test' split."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The name of the tokenizer to preprocess text with."
                                        },
                                        "use_masked_lm": {
                                            "type": "boolean",
                                            "description": "Whether the dataset should be encoded with masked language modeling or not."
                                        },
                                        "num_tokens": {
                                            "type": "integer",
                                            "description": "If desired, the number of tokens to truncate the dataset to."
                                        },
                                        "mlm_probability": {
                                            "type": "number",
                                            "description": "If using masked language modeling, the probability to mask tokens with."
                                        },
                                        "seed": {
                                            "type": "integer",
                                            "description": "Which seed to use to generate train and validation splits."
                                        },
                                        "subsample_ratio": {
                                            "type": "number",
                                            "description": "If desired, the percentage of the dataset to use."
                                        },
                                        "max_seq_length": {
                                            "type": "integer",
                                            "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^glue($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "use_synthetic": {
                                            "type": "boolean",
                                            "description": "Whether to use synthetic data. Defaults to False."
                                        },
                                        "synthetic_num_unique_samples": {
                                            "type": "integer",
                                            "description": "The number of unique samples to allocate memory for."
                                        },
                                        "synthetic_device": {
                                            "type": "string",
                                            "description": "Device to store the sample pool. Should be `cuda` or `cpu`. Defauls to `cpu`."
                                        },
                                        "synthetic_memory_format": {
                                            "enum": [
                                                "CONTIGUOUS_FORMAT",
                                                "CHANNELS_LAST_3D",
                                                "preserve_format",
                                                "contiguous_format",
                                                "PRESERVE_FORMAT",
                                                "channels_last",
                                                "CHANNELS_LAST",
                                                "channels_last_3d"
                                            ],
                                            "description": "Memory format. Defaults to contiguous format."
                                        },
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "task": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The GLUE task to train on, choose one from: CoLA, MNLI, MRPC, QNLI, QQP, RTE, SST-2, and STS-B."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                        },
                                        "split": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "Whether to use 'train', 'validation' or 'test' split."
                                        },
                                        "max_seq_length": {
                                            "type": "integer",
                                            "description": "Optionally, the ability to set a custom sequence length for the training dataset."
                                        },
                                        "max_network_retries": {
                                            "type": "integer",
                                            "description": "Optionally, the number of times to retry HTTP requests if they fail."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^coco($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "is_train": {
                                            "type": "boolean",
                                            "description": "Whether to load the training data (the default) or validation data."
                                        },
                                        "datadir": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The path to the data directory"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_coco($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "Which split of the dataset to use. Either ['train', 'val']"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^c4($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "Whether to drop the last samples for the last batch."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the samples in the dataset. Currently, shards are assigned and consumed with deterministic per-device shard order, but shuffling affects the order of samples via (per-device) shuffle buffers."
                                        },
                                        "split": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "What split of the dataset to use. Either `train` or `validation`."
                                        },
                                        "num_samples": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The number of post-processed token samples, used to set epoch size of the IterableDataset."
                                        },
                                        "tokenizer_name": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                        },
                                        "max_seq_len": {
                                            "oneOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "The max sequence length of each token sample."
                                        },
                                        "group_method": {
                                            "oneOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "description": "How to group text samples into token samples. Either `truncate` or `concat`."
                                        },
                                        "mlm": {
                                            "type": "boolean",
                                            "description": "Whether or not to use masked language modeling."
                                        },
                                        "mlm_probability": {
                                            "type": "number",
                                            "description": "If `mlm==True`, the probability that tokens are masked."
                                        },
                                        "shuffle_buffer_size": {
                                            "type": "integer",
                                            "description": "If `shuffle=True`, samples are read into a buffer of this size (per-device), and randomly sampled from there to produce shuffled samples."
                                        },
                                        "seed": {
                                            "type": "integer",
                                            "description": "If `shuffle=True`, what seed to use for shuffling operations."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        },
                        {
                            "type": "object",
                            "patternProperties": {
                                "^streaming_c4($|\\+)": {
                                    "type": "object",
                                    "properties": {
                                        "drop_last": {
                                            "type": "boolean",
                                            "description": "If the number of samples is not divisible by the batch size,\nwhether to drop the last batch (the default) or pad the last batch with zeros."
                                        },
                                        "shuffle": {
                                            "type": "boolean",
                                            "description": "Whether to shuffle the dataset for each epoch. Defaults to True."
                                        },
                                        "remote": {
                                            "type": "string",
                                            "description": "Remote directory (S3 or local filesystem) where dataset is stored"
                                        },
                                        "local": {
                                            "type": "string",
                                            "description": "Local filesystem directory where dataset is cached during operation"
                                        },
                                        "split": {
                                            "type": "string",
                                            "description": "What split of the dataset to use. Either `train` or `val`."
                                        },
                                        "tokenizer_name": {
                                            "type": "string",
                                            "description": "The name of the HuggingFace tokenizer to preprocess text with."
                                        },
                                        "max_seq_len": {
                                            "type": "integer",
                                            "description": "The max sequence length of each token sample."
                                        },
                                        "group_method": {
                                            "type": "string",
                                            "description": "How to group text samples into token samples. Currently only `truncate` is supported."
                                        },
                                        "mlm": {
                                            "type": "boolean",
                                            "description": "Whether or not to use masked language modeling."
                                        },
                                        "mlm_probability": {
                                            "type": "number",
                                            "description": "If `mlm==True`, the probability that tokens are masked."
                                        },
                                        "max_retries": {
                                            "type": "integer",
                                            "description": "Number of download re-attempts before giving up."
                                        },
                                        "timeout": {
                                            "type": "number",
                                            "description": "How long to wait for shard to download before raising an exception."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "referenced": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ],
                    "description": "Validation dataset hparams"
                },
                "batch_size": {
                    "type": "integer",
                    "description": "batch size to use for each evaluation step"
                },
                "dataloader_label": {
                    "type": "string",
                    "description": "The dataloader label to use for logging metrics. Defaults to ``'eval'``."
                },
                "subset_num_batches": {
                    "type": "integer",
                    "description": "If specified, evaluate on this many batches. Defaults to ``-1``,\nwhich means to iterate over the entire dataloader.\n\nThis parameter has no effect if ``eval_dataloader`` is not specified, it is greater than\n``len(eval_dataloader)``, or ``eval_dataloader`` is an :class:`.Evaluator` (which is via\n``Evaluator(subset_num_batches=...)``.)"
                },
                "log_level": {
                    "enum": [
                        "EPOCH",
                        1,
                        2,
                        3,
                        "epoch",
                        "FIT",
                        "fit",
                        "BATCH",
                        "batch"
                    ],
                    "description": "The log level to use when logging metrics. Defaults to\n:attr:`~.LogLevel.FIT`."
                },
                "metric_names": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/41_list"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/41_list"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Name of the metrics for the evaluator. Can be a torchmetrics metric name or the class name of a metric returned by model.metrics(). If None (the default), uses all metrics in the model"
                }
            },
            "additionalProperties": false,
            "required": [
                "dataset",
                "batch_size"
            ]
        }
    }
}

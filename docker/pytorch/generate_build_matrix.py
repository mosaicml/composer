"""
Helper script to generate the build_matrix.yaml

Note: this script requires tabulate. Run `pip install tabulate` if not installed

To run: python generate_build_matrix.py

Also update the `README.md` in the docker folder with the resulting table.
"""

import itertools
import os

import tabulate
import yaml


def get_pytorch_version(python_version: str):
    if python_version == "3.10":
        return "1.11.0"
    if python_version in ("3.7", "3.8", "3.9"):
        return "1.10.2"
    raise ValueError(f"Invalid python version: {python_version}")


def get_torchvision_version(pytorch_version: str):
    if pytorch_version == "1.10.2":
        return "0.11.3"
    if pytorch_version == "1.11.0":
        return "0.12.0"
    raise ValueError(f"Invalid pytorch_version: {pytorch_version}")


def get_base_image(cuda_version: str):
    if cuda_version == "cpu":
        return "ubuntu:20.04"
    if cuda_version == "11.3.1":
        return "nvidia/cuda:11.3.1-cudnn8-devel-ubuntu20.04"
    raise ValueError(f"Invalid cuda_version: {cuda_version}")


def get_cuda_version_tag(cuda_version: str):
    if cuda_version == "cpu":
        return "cpu"
    if cuda_version == "11.3.1":
        return "cu113"
    raise ValueError(f"Invalid cuda_version: {cuda_version}")


def get_tags(python_version: str, pytorch_version: str, cuda_version_tag: str, cuda_version: str, stage: str):
    if stage == "pytorch_stage":
        base_image_name = "mosaicml/pytorch"
    elif stage == "vision_stage":
        base_image_name = "mosaicml/pytorch_vision"
    else:
        raise ValueError(f"Invalid stage: {stage}")
    tags = [f"{base_image_name}:{pytorch_version}_{cuda_version_tag}-python{python_version}-ubuntu20.04"]

    if python_version == "3.10":
        if cuda_version == "cpu":
            tags.append(f"{base_image_name}:latest_cpu")
        else:
            tags.append(f"{base_image_name}:latest")

    return tags


def main():
    python_versions = ["3.7", "3.8", "3.9", "3.10"]
    cuda_versions = ["11.3.1", "cpu"]
    stages = ["pytorch_stage", "vision_stage"]

    entries = []

    for product in itertools.product(python_versions, cuda_versions, stages):
        python_version, cuda_version, stage = product

        pytorch_version = get_pytorch_version(python_version)

        cuda_version_tag = get_cuda_version_tag(cuda_version)

        entry = {
            "BASE_IMAGE":
                get_base_image(cuda_version),
            "CUDA_VERSION":
                cuda_version,
            "CUDA_VERSION_TAG":
                cuda_version_tag,
            "LINUX_DISTRO":
                "ubuntu2004",
            "PYTHON_VERSION":
                python_version,
            "PYTORCH_VERSION":
                pytorch_version,
            "TARGET":
                stage,
            "TORCHVISION_VERSION":
                get_torchvision_version(pytorch_version),
            "TAGS":
                get_tags(
                    python_version=python_version,
                    pytorch_version=pytorch_version,
                    cuda_version_tag=cuda_version_tag,
                    cuda_version=cuda_version,
                    stage=stage,
                ),
        }

        if stage == "vision_stage":
            if python_version == "3.7" or python_version == "3.8":
                # only build the vision image on python 3.9 and 3.10
                continue
            entry["MMCV_TORCH_VERSION"] = f"torch{pytorch_version}"
            entry["MMCV_VERSION"] = "1.4.8"

        if cuda_version != "cpu":
            # Install the Mellanox drivers in the cuda images
            entry['MOFED_OS_VERSION'] = "ubuntu20.04-x86_64"
            entry['MOFED_VERSION'] = "5.5-1.0.3.2"

        entries.append(entry)

    with open(os.path.join(os.path.dirname(__name__), "build_matrix.yaml"), "w+") as f:
        f.write("# This file is automatically generated by generate_build_matrix.py. DO NOT EDIT!\n")
        yaml.safe_dump(entries, f)

    # Also print the table for the readme
    headers = ["Linux Distro", "Flavor", "PyTorch Version", "CUDA Version", "Python Version", "Docker Tags"]

    table = []
    for entry in entries:
        table.append([
            "Ubuntu 20.04",  # Linux distro
            "Base" if entry["TARGET"] == "pytorch_stage" else "Vision",  # Flavor
            entry["PYTORCH_VERSION"],  # Pytorch version
            entry["CUDA_VERSION"],  # Cuda version
            entry["PYTHON_VERSION"],  # Python version,
            ", ".join(reversed(list(f"`{x}`" for x in entry["TAGS"]))),  # Docker tags
        ])

    table.sort(key=lambda x: x[3])
    table.sort(key=lambda x: x[4], reverse=True)
    table.sort(key=lambda x: x[2], reverse=True)
    table.sort(key=lambda x: x[1])

    print("Successfully updated `build_matrix.yaml`. Please also update the README.md with the following table:")
    print()

    print(tabulate.tabulate(table, headers, tablefmt="github", floatfmt="", disable_numparse=True))


if __name__ == "__main__":
    main()
